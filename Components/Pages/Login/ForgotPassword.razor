@page "/forgot-password"
@using FROASTERY.Models
@rendermode InteractiveServer
@using FROASTERY.Data;
@using Microsoft.EntityFrameworkCore;
@inject AppDbContext DbContext
@inject NavigationManager NavigationManager
@using FROASTERY.Services
@inject EmailService EmailService
<PageTitle> Lấy lại mật khẩu</PageTitle>

<div class="container d-flex justify-content-center">
    <div class="p-4 rounded shadow" style="background-color: #215224; width: 100%; max-width: 500px;">
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert @(ShowErrors ? "alert-danger" : "alert-success")">
                @ErrorMessage
            </div>
        }
        <h3 class="text-center mb-4"style="color: white" >Quên mật khẩu</h3>
        <EditForm Model="forgotPasswordRequest" OnValidSubmit="HandleForgotPassword">
            <DataAnnotationsValidator />


            <div class="mb-3" style="color: white">
                <label>Email:</label>
                 <InputText @bind-Value="forgotPasswordRequest.Email" 
               class="form-control" 
               placeholder="Nhập email của bạn"
               title="Chúng tôi sẽ gửi cho bạn link qua email để reset lại mật khẩu" />
                <ValidationMessage For="@(() => forgotPasswordRequest.Email)" />
            </div>

            <div class="d-flex justify-content-end">
                <button type="submit" class="btn btn-outline-secondary">Gửi liên kết đặt lại mật khẩu</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private ForgotPasswordRequest forgotPasswordRequest = new();
    private bool ShowErrors = false;
    private string ErrorMessage = "";

    private async Task HandleForgotPassword()
    {
        ShowErrors = false;
        ErrorMessage = "";

        try
        {
            var user = await DbContext.NguoiDungs.Where(p => !p.DaXoa)
                .FirstOrDefaultAsync(u => u.Email == forgotPasswordRequest.Email);

            if (user != null)
            {
                var resetToken = Guid.NewGuid().ToString();
                user.ResetToken = resetToken;
                user.ResetTokenExpiry = DateTime.UtcNow.AddHours(1);
                await DbContext.SaveChangesAsync();

                var resetLink = NavigationManager.BaseUri + "reset-password?token=" + resetToken + "&email=" + forgotPasswordRequest.Email;
                await EmailService.SendEmailAsync(forgotPasswordRequest.Email, "Đặt lại mật khẩu", $"Nhấp vào liên kết để đặt lại mật khẩu: {resetLink}");

                ErrorMessage = "Liên kết đặt lại mật khẩu đã được gửi tới email của bạn.";
            }
            else
            {
                ShowErrors = true;
                ErrorMessage = "Không tìm thấy email.";
            }
        }
        catch (Exception ex)
        {
            ShowErrors = true;
            ErrorMessage = $"Đã xảy ra lỗi: {ex.Message}";
        }

        StateHasChanged();
    }
}
