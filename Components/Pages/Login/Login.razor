@page "/dangnhap"
@inject NavigationManager Navigation
@inject AppDbContext DbContext
@rendermode InteractiveServer
@using FROASTERY.Models
@using FROASTERY.Data
@using Microsoft.EntityFrameworkCore;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor

@* import dùng cho userlayout *@
@inject UserSessionService SessionService

@using FROASTERY.Services;
<PageTitle>Đăng nhập</PageTitle>

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
<div class="container d-flex justify-content-center">
    <div class="p-4 rounded shadow" style="background-color: #215224; width: 100%; max-width: 600px;">
        <h3 class="text-center " style="color: white">Đăng nhập</h3>
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3" style="color: white">
                <label>Email:</label>
                <InputText class="form-control" @bind-Value="loginModel.Email" />
            </div>
            <div class="mb-3 position-relative" style="color: white">
                <label>Mật khẩu:</label>
                <InputText class="form-control pe-5" @bind-Value="loginModel.MatKhau"
                    type="@(_showPassword ? "text" : "password")" />

                <span style="position: absolute; top: 70%; right: 1rem; transform: translateY(-50%); cursor: pointer;"
                    @onclick="() => _showPassword = !_showPassword">
                     <i class="@(_showPassword ? "bi bi-eye-slash" : "bi bi-eye")" style="color: black;"></i>
                </span>
                
            </div>

            <div class="row ">
                <div class="col">
                    <a href="/dangky">Chưa có tài khoản?</a>
                </div>
                <div class="col text-end">
                    <a href="/forgot-password">Quên mật khẩu?</a>
                </div>
            </div>

            <div class="d-flex justify-content-around mt-3">
                <button class="btn-save " type="submit">Đăng nhập</button>
                <button class="btn btn-outline-secondary" @onclick="@(() => Navigation.NavigateTo("/dangky"))">Đăng
                    ký</button>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="text-danger mt-3">@errorMessage</div>
            }
        </EditForm>
    </div>
</div>
@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool _showPassword = false;
    private async Task HandleLogin()
    {
        var nguoiDung = await DbContext.NguoiDungs
        .Include(u => u.PhanQuyens)
        .ThenInclude(pq => pq.Quyen)
        .Where(p => !p.DaXoa)
        .FirstOrDefaultAsync(u => u.Email == loginModel.Email);

        if (nguoiDung != null && PasswordHelper.VerifyPassword(loginModel.MatKhau, nguoiDung.MatKhau))
        {
            // Lấy danh sách quyền của người dùng
            var userRoles = nguoiDung.PhanQuyens?.Select(pq => pq.Quyen?.TenQuyen).ToList();

            @* lan goi cho userlayout *@
            SessionService.Login(nguoiDung.Email);
            
            var customAuthProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
            // Đặt quyền cho người dùng vào ClaimsPrincipal
            var claims = new List<Claim>
{
new Claim(ClaimTypes.Name, nguoiDung.Email),
new Claim("UserId", nguoiDung.MaNguoiDung.ToString())
};
            if (userRoles != null)
            {
                foreach (var role in userRoles)
                {
                    if (!string.IsNullOrEmpty(role))
                    {
                        claims.Add(new Claim(ClaimTypes.Role, role));
                    }

                }
            }
            // In vai trò vào Console
            if (userRoles != null)
{
    Console.WriteLine("User Roles: " + string.Join(", ", userRoles));
    
}
            var identity = new ClaimsIdentity(claims, "password");
            var principal = new ClaimsPrincipal(identity);

            // Xác thực người dùng
            @* customAuthProvider.MarkUserAsAuthenticated(principal); *@
            await customAuthProvider.MarkUserAsAuthenticated(
    nguoiDung.Email,
    (userRoles ?? new List<string?>())
        .Where(role => !string.IsNullOrEmpty(role))
        .Select(role => role!) // Dùng "!" để ép kiểu từ string? thành string
        .ToList()
);


            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user?.Identity?.IsAuthenticated == true)
            {
                Console.WriteLine("User: " + user?.Identity?.Name);
                Console.WriteLine("UserId: " + principal.FindFirst("UserId")?.Value);


                Console.WriteLine("Đăng nhập thành công.");
                // Điều hướng người dùng đến trang home
                StateHasChanged();
                if (userRoles != null && userRoles.Contains("User") && userRoles.Count == 1)
                {
                    // Nếu chỉ có quyền "user"
                    Navigation.NavigateTo("/", forceLoad: true);
                }
                else
                {
                    // Nếu có quyền khác (hoặc có nhiều quyền bao gồm cả user)
                    Navigation.NavigateTo("/home_admin", forceLoad: true);
                }
              
            }
            else
            {
                Console.WriteLine("Đăng nhập không thành công.");
            }
        }
        else
        {
            errorMessage = "Email hoặc mật khẩu không đúng.";
        }
    }

}
