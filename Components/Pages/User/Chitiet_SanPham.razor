@page "/chitietsanpham/{MaSanPham:int}"
@using FROASTERY.Models
@rendermode InteractiveServer
@using FROASTERY.Data;
@using Microsoft.EntityFrameworkCore;
@inject AppDbContext DbContext

<PageTitle>Chi Ti·∫øt S·∫£n Ph·∫©m</PageTitle>
<style>
    #product-promotion {
        margin-top: 1rem;
        background-color: #eceae3;
        position: relative;
        padding: 1rem;
        overflow: hidden; /* ƒê·ªÉ ƒë·∫£m b·∫£o h√¨nh trang tr√≠ kh√¥ng tr√†n */
    }
    #product-promotion .decor-top-left {
        position: absolute;
        top: 10%;
        left: 0;
        width: 15%;
        opacity: 0.5;
    }
    #product-promotion .decor-bottom-right {
        position: absolute;
        bottom: 10%;
        right: 0;
        width: 15%;
        opacity: 0.5;
    }
    .product-detail-horizontal {
        max-width: 1200px;
        width: 100%;
    }

    .product-detail-horizontal .card-body p,
    .product-detail-horizontal .card-body h3,
    .product-detail-horizontal .card-body h5 {
        margin-bottom: 0.5rem;
    }

    .object-fit-contain {
        object-fit: contain;
    }

    media (max-width: 768px) {
        .product-detail-horizontal .row {
            flex-direction: column !important;
        }

        .product-detail-horizontal .col-md-5,
        .product-detail-horizontal .col-md-7 {
            width: 100% !important;
            max-width: none;
        }

        .product-detail-horizontal img {
            max-width: 100%;
            height: auto;
        }
    }
</style>

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using FROASTERY.Services;
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor

@code {
     private ClaimsPrincipal? _currentUser;
    private bool isLoggedIn = false;
    private bool isUser = false;

    // Thay ƒë·ªïi t·ª´ OnInitializedAsync sang OnAfterRenderAsync
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // L·∫•y tr·∫°ng th√°i x√°c th·ª±c c·ªßa ng∆∞·ªùi d√πng
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                _currentUser = authState.User;

                // In th√¥ng tin ng∆∞·ªùi d√πng v√† tr·∫°ng th√°i x√°c th·ª±c
                Console.WriteLine("User: " + _currentUser?.Identity?.Name);
                
                Console.WriteLine("Is Authenticated: " + _currentUser?.Identity?.IsAuthenticated);

                // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ch∆∞a x√°c th·ª±c
                if (_currentUser?.Identity == null || !_currentUser.Identity.IsAuthenticated)
                {
                    isLoggedIn = false;
                   
                }
                else{
                     isLoggedIn = true;
                }

                if (isLoggedIn == true)
                {
                    isUser = _currentUser?.IsInRole("User") == true;

                }
                Console.WriteLine("IisLoggedI: " + isUser);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error during authentication check: " + ex.Message);
            }
        }
    }
}



@using FROASTERY.Components.Shared

<link rel="stylesheet" href="lib/bootstrap/dist/css/bootstrap.min.css" />
<link rel="stylesheet" href="custom.css" />



<section id="product-promotion">
    @if (showSuccess && !string.IsNullOrEmpty(successMessage))
{
    <div class="toast-container position-fixed end-0 p-3" style="top: 4rem; z-index: 1055;">
        <div class="toast show align-items-center text-bg-success border-0" role="alert">
            <div class="d-flex">
                <div class="toast-body">
                    @successMessage
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="() => showSuccess = false"></button>
            </div>
        </div>
    </div>
}



    <img src="./uploads/decor1.png" alt="decor" class="decor-top-left" />
    <img src="./uploads/decor2.png" alt="decor" class="decor-bottom-right" />
<div class="container d-flex justify-content-center align-items-center my-5">
    <div class="card shadow-lg product-detail-horizontal">
        
        @if (errorMessage != null)
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
        else if (sanPhamChiTiet != null)
        {
            <div class="row g-0 align-items-center">
           
                <div class="col-md-5 text-center p-3">
                    @if (!string.IsNullOrEmpty(sanPhamChiTiet.Anh))
                    {
                        <img src="@sanPhamChiTiet.Anh" alt="@sanPhamChiTiet.TenSanPham"
                            class="img-fluid rounded object-fit-contain" style="max-height: 450px;" />
                    }
                    else
                    {
                        <p class="text-muted">Kh√¥ng c√≥ ·∫£nh s·∫£n ph·∫©m.</p>
                    }
                </div>

                <div class="col-md-7 d-flex flex-column justify-content-between p-4">
                    <div class="card-body p-0">
                        <h3 class="card-title mb-3">@sanPhamChiTiet.TenSanPham</h3>
                        <p class="card-subtitle text-muted mb-2">M√£ s·∫£n ph·∫©m: @sanPhamChiTiet.MaSanPham</p>
                        @if (sanPhamChiTiet.LoaiSanPham != null)
                        {
                            <p class="card-text mb-2">Lo·∫°i s·∫£n ph·∫©m: @sanPhamChiTiet.LoaiSanPham.TenLoaiSP</p>
                        }
                        <p class="card-text mb-3">@sanPhamChiTiet.MoTa</p>
                        <div class="mb-3">
                            <h5 class="card-subtitle mb-2">Chi ti·∫øt:</h5>
                            <p class="card-text small text-start">@((MarkupString)(sanPhamChiTiet.ChiTiet?.Replace("\r\n", "<br/>").Replace("\n", "<br/>") ?? "Kh√¥ng c√≥ chi ti·∫øt"))</p>
                        </div>
                        <h4 class="card-text mb-4">
                            Gi√°:
                            @if (sanPhamChiTiet.Gia.HasValue)
                            {
                                <span class="fw-bold">@sanPhamChiTiet.Gia.Value.ToString("N0") VNƒê</span>
                            }
                            else
                            {
                                <span class="text-muted">Ch∆∞a c√≥ gi√°</span>
                            }
                        </h4>
                    </div>
                    <div class="card-footer bg-transparent border-top-0 d-flex gap-2 p-0">
                        <button class="btn btn-secondary" @onclick="NavigateBack">Quay l·∫°i</button>
                        <button class="btn btn-warning" @onclick="ThemVaoGioHangAsync">Th√™m v√†o gi·ªè h√†ng</button>

                        <button class="btn btn-success" @onclick="@(() => MuaNgay(sanPhamChiTiet))">Mua ngay</button>
                    </div>
                </div>
            </div>
        }
        else
        {
            <p class="text-center">ƒêang t·∫£i th√¥ng tin s·∫£n ph·∫©m...</p>
        }
    </div>
</div>
</section
@inject NavigationManager NavigationManager





@code {
    private string? successMessage;
private bool showSuccess = false;

private void MuaNgay(SanPham sp)
{
   NavigationManager.NavigateTo($"/dathangsp/{sp.MaSanPham}");
}

    [Parameter]
    public int MaSanPham { get; set; }

    private SanPham? sanPhamChiTiet;
    private string? errorMessage;

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/quangba"); // Ho·∫∑c trang danh s√°ch s·∫£n ph·∫©m c·ªßa b·∫°n
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            sanPhamChiTiet = await DbContext.SanPhams.FirstOrDefaultAsync(sp => sp.MaSanPham == MaSanPham);

            if (sanPhamChiTiet == null)
            {
                errorMessage = $"Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi m√£: {MaSanPham}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"L·ªói khi t·∫£i chi ti·∫øt s·∫£n ph·∫©m: {ex.Message}";
        }
    }

    private async Task ThemVaoGioHangAsync()
{
    // 1. N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p ‚Üí chuy·ªÉn h∆∞·ªõng
    if (isLoggedIn == false)
    {
        NavigationManager.NavigateTo("/dangnhap");
        return;
    }

    // 2. N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p nh∆∞ng kh√¥ng ph·∫£i role User?
    if (!isUser)
    {
        // C√≥ th·ªÉ redirect v·ªÅ trang home ho·∫∑c c·∫£nh b√°o
        NavigationManager.NavigateTo("/home");
        return;
    }

    // 3. ƒê√£ ƒëƒÉng nh·∫≠p v√† l√† User ‚Üí th·ª±c hi·ªán th√™m gi·ªè h√†ng
    try
    {
        // L·∫•y email t·ª´ claims
        var email = _currentUser!.Identity!.Name!;

        // L·∫•y MaNguoiDung
        var nguoiDung = await DbContext.NguoiDungs
            .FirstOrDefaultAsync(u => u.Email == email);
        if (nguoiDung == null)
        {
            NavigationManager.NavigateTo("/dangnhap");
            return;
        }

        var maNguoiDung = nguoiDung.MaNguoiDung;

        // Ki·ªÉm tra v√† th√™m / tƒÉng s·ªë l∆∞·ª£ng
        var gioHangItem = await DbContext.GioHangs
            .FirstOrDefaultAsync(g => g.MaNguoiDung == maNguoiDung && g.MaSanPham == MaSanPham);

        if (gioHangItem != null){
            gioHangItem.SoLuong += 1;
           
        } else{
            DbContext.GioHangs.Add(new GioHang {
                MaSanPham = MaSanPham,
                SoLuong = 1,
                MaNguoiDung = maNguoiDung
            });
           
        }
        
        await DbContext.SaveChangesAsync();

        successMessage = "ƒê√£ th√™m v√†o gi·ªè h√†ng!";
        showSuccess = true;
        StateHasChanged(); // üëâ G·ªçi ngay ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
        // T·ª± ·∫©n sau 3 gi√¢y
        await Task.Delay(3000);
        showSuccess = false;
        StateHasChanged(); // C·∫≠p nh·∫≠t l·∫°i giao di·ªán
        
    }
    catch (Exception ex)
    {
        errorMessage = $"L·ªói khi th√™m v√†o gi·ªè h√†ng: {ex.Message}";
    }
}

}