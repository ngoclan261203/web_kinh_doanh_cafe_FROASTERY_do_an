@page "/lich-su-don-hang"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using FROASTERY.Services;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@using Microsoft.EntityFrameworkCore
@inject AppDbContext DbContext
@inject IWebHostEnvironment Environment
@rendermode InteractiveServer
@using FROASTERY.Models
@using FROASTERY.Data
@using System.IO
@using FROASTERY.Components.Shared

<link rel="stylesheet" href="lib/bootstrap/dist/css/bootstrap.min.css" />
<link rel="stylesheet" href="custom.css" />
<PageTitle>L·ªãch S·ª≠ ƒê·∫∑t H√†ng</PageTitle>
<style>
        h2 {
        text-align: left;
        padding-top: 10px; 
        @* color: #06622f; *@
        text-align: center;
        padding-top: 20px;
        font-weight: bold;
</style>
<h2 class="mb-4">üßæ L·ªãch S·ª≠ Mua H√†ng</h2>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (donHangs != null && donHangs.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>M√£ ƒê∆°n H√†ng</th>
                <th>Th·ªùi Gian ƒê·∫∑t</th>
                <th>T·ªïng Ti·ªÅn</th>
                <th>Ph∆∞∆°ng Th·ª©c Thanh To√°n</th>
                <th>ƒê·ªãa Ch·ªâ Giao H√†ng</th>
                <th>Tr·∫°ng Th√°i</th>
                <th>Chi Ti·∫øt</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var donHang in donHangs)
            {
                <tr>
                    <td>@donHang.MaDonHang</td>
                    <td>@donHang.ThoiGian</td>
                    <td>@donHang.TongTien?.ToString("N0") VNƒê</td>
                    <td>@donHang.PhuongThucThanhToan</td>
                    <td>@donHang.DiaChi</td>
                    <td>@donHang.TrangThai</td>
                    <td>
                        <button class="btn btn-info btn-sm" @onclick="() => ShowChiTiet(donHang.MaDonHang)">Xem Chi Ti·∫øt</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (selectedDonHang != null)
    {
        <div class="modal fade show" id="orderDetailsModal" tabindex="-1" role="dialog" aria-labelledby="orderDetailsModalLabel" aria-hidden="true" style="display: block; background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="orderDetailsModalLabel">Chi Ti·∫øt ƒê∆°n H√†ng #@selectedDonHang.MaDonHang</h5>
                        <button type="button" class="btn-close" @onclick="CloseChiTiet"></button>
                    </div>
                    <div class="modal-body">
                        <p><strong>Th·ªùi Gian ƒê·∫∑t:</strong> @selectedDonHang.ThoiGian</p>
                        <p><strong>Th√¥ng Tin Li√™n L·∫°c:</strong> @selectedDonHang.ThongTinLienLac</p>
                        <p><strong>ƒê·ªãa Ch·ªâ Giao H√†ng:</strong> @selectedDonHang.DiaChi</p>
                        <p><strong>Ph∆∞∆°ng Th·ª©c Thanh To√°n:</strong> @selectedDonHang.PhuongThucThanhToan</p>
                        <p><strong>Tr·∫°ng Th√°i:</strong> @selectedDonHang.TrangThai</p>
                    @if (selectedDonHang?.MaKhuyenMai.HasValue == true)
                    {
                        var maKhuyenMaiStr = selectedDonHang.MaKhuyenMai.ToString();
                        var khuyenMai = KhuyenMais.FirstOrDefault(km => km.MaSuKien == selectedDonHang.MaKhuyenMai);
                        if (khuyenMai != null)
                        {
                            <p><strong>M√£ Khuy·∫øn M√£i:</strong> @khuyenMai.TieuDe (@khuyenMai.NoiDung)</p>
                        }
                        else
                        {
                            <p><strong>M√£ Khuy·∫øn M√£i:</strong> @maKhuyenMaiStr (Kh√¥ng t√¨m th·∫•y)</p>
                        }
                    }
                    else
                    {
                        <p><strong>M√£ Khuy·∫øn M√£i:</strong> Kh√¥ng c√≥</p>
                    }
                        <hr/>
                        <h5>S·∫£n Ph·∫©m ƒê√£ ƒê·∫∑t</h5>
                    @if (@selectedDonHang?.ChiTietDonHangs != null && selectedDonHang.ChiTietDonHangs.Any())
                    {
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>T√™n S·∫£n Ph·∫©m</th>
                                    <th>S·ªë L∆∞·ª£ng</th>
                                    <th>Gi√° B√°n</th>
                                    <th>Th√†nh Ti·ªÅn</th>
                                </tr>
                            </thead>
                                <tbody>
                                    @foreach (var chiTiet in selectedDonHang?.ChiTietDonHangs ?? new List<ChiTietDonHang>())
                                    {
                                        <tr>
                                            <td>@SanPhams.FirstOrDefault(sp => sp.MaSanPham == chiTiet.MaSanPham)?.TenSanPham</td>
                                            <td>@chiTiet?.SoLuong</td>
                                            <td>@SanPhams.FirstOrDefault(sp => sp.MaSanPham == chiTiet?.MaSanPham)?.Gia?.ToString("N0") VNƒê</td>
                                            <td>@(((chiTiet?.SoLuong ?? 0) * (SanPhams.FirstOrDefault(sp => sp.MaSanPham == chiTiet?.MaSanPham)?.Gia ?? 0)).ToString("N0")) VNƒê</td>
                                        </tr>
                                    }
                                </tbody>
                        </table>
                        <p class="text-end"><strong>T·ªïng Ti·ªÅn ƒê∆°n H√†ng:</strong> @selectedDonHang?.TongTien?.ToString("N0") VNƒê</p>
                    }
                    else
                    {
                        <p>Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong ƒë∆°n h√†ng n√†y.</p>
                    }
                        <hr/>
                        <h5>Qu√† T·∫∑ng K√®m Theo</h5>
                        @if (@selectedDonHang?.ChiTietQuaTangDonHangs != null && selectedDonHang.ChiTietQuaTangDonHangs.Any())
                        {
                            <ul class="list-group">
                                @foreach (var quaTang in selectedDonHang.ChiTietQuaTangDonHangs)
                                {
                                    var tenSanPhamQuaTang = SanPhams.FirstOrDefault(sp => sp.MaSanPham == quaTang.MaSanPhamQuaTang)?.TenSanPham ?? "Kh√¥ng r√µ";
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>@tenSanPhamQuaTang</span>
                                        <span class="badge bg-success rounded-pill">@quaTang.SoLuong</span>
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>Kh√¥ng c√≥ qu√† t·∫∑ng n√†o k√®m theo ƒë∆°n h√†ng n√†y.</p>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseChiTiet">ƒê√≥ng</button>
                    </div>
                </div>
            </div>
        </div>
    }
}
else
{
    <p>Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o.</p>
}


@code {
    private ClaimsPrincipal? _currentUser;
    private int? maNguoiDung;
    private List<DonHang>? donHangs;
    private DonHang? selectedDonHang;
    private string? errorMessage;
    private List<SanPham> SanPhams = new();
    private List<SuKien> KhuyenMais = new();
    private string? maKhuyenMaiStr;
    private bool isFirstRender = true; // Th√™m bi·∫øn ki·ªÉm tra render l·∫ßn ƒë·∫ßu

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                _currentUser = authState.User;

                Console.WriteLine("User: " + _currentUser?.Identity?.Name);
                Console.WriteLine("UserId: " + _currentUser?.FindFirst("UserId")?.Value);
                Console.WriteLine("Is Authenticated: " + _currentUser?.Identity?.IsAuthenticated);

                // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ch∆∞a x√°c th·ª±c
                if (_currentUser?.Identity == null || !_currentUser.Identity.IsAuthenticated)
                {
                    Console.WriteLine("User not authenticated. Redirecting to /dangnhap.");
                    NavigationManager.NavigateTo("/dangnhap", true);
                    return;
                }

                var email = _currentUser.Identity.Name!;
                var nguoiDung = await DbContext.NguoiDungs.FirstOrDefaultAsync(u => u.Email == email);

                if (nguoiDung == null)
                {
                    Console.WriteLine($"User with email '{email}' not found. Redirecting to /dangnhap.");
                    NavigationManager.NavigateTo("/dangnhap", true);
                    return;
                }

                maNguoiDung = nguoiDung.MaNguoiDung;
                Console.WriteLine($"MaNguoiDung for '{email}': {maNguoiDung}");

                await LoadDonHangs();
                SanPhams = await DbContext.SanPhams.AsNoTracking().ToListAsync();
                KhuyenMais = await DbContext.SuKiens.Where(sk => sk.MaLoaiTin == 2).ToListAsync();
                StateHasChanged(); // C·∫≠p nh·∫≠t UI sau khi t·∫£i d·ªØ li·ªáu l·∫ßn ƒë·∫ßu
            }
            catch (Exception ex)
            {
                errorMessage = $"L·ªói trong qu√° tr√¨nh ki·ªÉm tra x√°c th·ª±c ho·∫∑c t·∫£i d·ªØ li·ªáu: {ex.Message}";
                Console.WriteLine(errorMessage);
            }
        }
        isFirstRender = false;
    }

    private async Task LoadDonHangs()
    {
        if (maNguoiDung.HasValue)
        {
            try
            {
                donHangs = await DbContext.DonHangs
                    .Where(d => d.MaNguoiDung == maNguoiDung.Value)
                    .Include(d => d.ChiTietDonHangs)
                        .ThenInclude(ct => ct.SanPham)
                    .Include(d => d.ChiTietQuaTangDonHangs)
                        .ThenInclude(qt => qt.SanPhamQuaTang)
                    .Where(p => !p.DaXoa)
                    .OrderByDescending(d => d.ThoiGian)
                    .ToListAsync();
            }
            catch (Exception ex)
            {
                errorMessage = $"L·ªói khi t·∫£i l·ªãch s·ª≠ ƒë∆°n h√†ng: {ex.Message}";
                Console.WriteLine(errorMessage);
            }
        }
    }

    private void ShowChiTiet(int maDonHang)
    {
        selectedDonHang = donHangs?.FirstOrDefault(d => d.MaDonHang == maDonHang);
        maKhuyenMaiStr = selectedDonHang?.MaKhuyenMai?.ToString();
    }

    private void CloseChiTiet()
    {
        selectedDonHang = null;
        maKhuyenMaiStr = null;
    }
}