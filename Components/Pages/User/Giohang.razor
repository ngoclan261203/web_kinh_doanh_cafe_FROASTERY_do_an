@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using FROASTERY.Services;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@inject CartService CartService

@page "/gio-hang"
@inject IJSRuntime JSRuntime
@using Microsoft.EntityFrameworkCore
@using System.IO
@inject IWebHostEnvironment Environment
@inject AppDbContext DbContext
@rendermode InteractiveServer
@using FROASTERY.Models
@using FROASTERY.Data
@using FROASTERY.Components
@using FROASTERY.Components.Shared

<link rel="stylesheet" href="lib/bootstrap/dist/css/bootstrap.min.css" />
<link rel="stylesheet" href="custom.css" />
<PageTitle>üõí Gi·ªè H√†ng C·ªßa B·∫°n</PageTitle>
<style>
        .gio-hang-container {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .item-gio-hang {
        display: flex;
        border: 1px solid #ccc;
        padding: 16px;
        border-radius: 8px;
        align-items: center;
        justify-content: space-between;
        position: relative;
        background-color: #fff;
    }

    .anh-san-pham img {
        width: 150px;
        height: 150px;
        object-fit: cover;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .thong-tin-san-pham {
        flex: 1;
        margin-left: 20px;
    }

    .thong-tin-san-pham h4 {
        margin: 0 0 8px 0;
    }

    .mo-ta {
        font-size: 0.9rem;
        color: #666;
    }

    .gia {
        font-weight: bold;
        margin-top: 8px;
        margin-bottom: 12px;
    }

    .so-luong {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .so-luong-input {
        width: 60px;
        text-align: center;
    }

    .action {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        gap: 8px;
    }

    .action input[type="checkbox"] {
        transform: scale(1.2);
    }

    .action button {
        background-color: transparent;
        border: none;
        font-size: 20px;
        color: #dc3545;
        cursor: pointer;
    }
    .btn-thanh-toan {
        background-color: #064723;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
    }
    .delete-button-container {
    position: absolute;
    top: 0;
    right: 0;

    }

    .delete-button {
        padding: 5px;
        font-size: 0.8em;
        cursor: pointer; 
    }

    .delete-button:hover {
        background-color: #dc3545 !important; 
        color: white; 
    }
    .form-check-input:checked {
        background-color: #347451 !important;
        border-color: #06622f !important;
    }
    .btn-thanh-toan:hover {
        background-color: #e7bf1e;
    }
    .btn-gray {
    background-color: #297858 !important;
    border-color:  #06622f  !important;
    color: white !important;
}
    .tong-tien {
        margin-top: 24px;
        font-size: 1.5rem;
        font-weight: bold;
        text-align: right;
        color: red;
    }
        h2 {
        text-align: left;
        padding-top: 10px; 
        @* color: #06622f; *@
        text-align: center;
        padding-top: 20px;
        font-weight: bold;
    }
    
</style>
<h2 class="mb-4">üõí Gi·ªè H√†ng C·ªßa B·∫°n</h2>
@* @if (hienThongBao)
{
    <ThongBao NoiDung="@thongBaoNoiDung" MauSac="@thongBaoMauSac" OnCloseThongBao="AnThongBao" />
} *@

 @if (showError && !string.IsNullOrEmpty(errorMessage))
{
    <div class="toast-container position-fixed end-0 p-3" style="top: 4rem; z-index: 1055;">
        <div class="toast show align-items-center text-bg-danger border-0" role="alert">
            <div class="d-flex">
                <div class="toast-body">
                    @errorMessage
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto"
                        @onclick="() => showError = false"></button>
            </div>
        </div>
    </div>
}


@if (gioHang == null || gioHang.Count == 0)
{
    <p>Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.</p>
}
else
{
<div class="container mt-4">
    <div class="gio-hang-container">
        @foreach (var item in gioHang)
        {
            <div class="item-gio-hang">
                <div class="anh-san-pham">
                    <img src="@item.AnhSanPham" alt="@item.TenSanPham" />
                </div>
                <div class="thong-tin-san-pham">
                    <h4>@item.TenSanPham</h4>
                    <p class="mo-ta">@item.MoTa</p>
                    <p class="gia">Gi√°: @(item.Gia.HasValue ? item.Gia.Value.ToString("N0") : "0") VNƒê</p>
                    <div class="so-luong">
                        S·ªë l∆∞·ª£ng:
                        <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => ThayDoiSoLuongAsync(item.MaSanPham, -1))">-</button>
                        @* <input type="number" class="form-control form-control-sm so-luong-input" value="@item.SoLuong" @onchange="@((ChangeEventArgs e) => CapNhatSoLuongTuInputAsync(item.MaSanPham, e))" readonly min="0" /> *@
                                                <input type="number" class="form-control form-control-sm so-luong-input" value="@item.SoLuong" readonly min="0" />
                        <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => ThayDoiSoLuongAsync(item.MaSanPham, 1))">+</button>
                    </div>
                </div>
                <div class="action delete-button-container">
                    <button class="btn btn-sm btn-danger delete-button" @onclick="@(() => XoaSanPham(item.MaSanPham))">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="select-item">
                    <input type="checkbox" class="form-check-input" @onchange="@((ChangeEventArgs e) => CheckboxChanged1(item.MaSanPham, (bool)e.Value))" checked="@item.Chon" />
                </div>
            </div>
                                                @*  ph·∫ßn n√†y m thay th√†nh checkbox m g·ªçi b√™n kia  n√†y  *@
                    @* <button class="btn btn-primary  btn-gray mt-3" @onclick="LuuGioHangVaoDb">
                        üíæ L∆∞u thay ƒë·ªïi gi·ªè h√†ng
                    </button> *@
        }
    </div>
    <div class="tong-tien-thanh-toan d-flex justify-content-between align-items-center mt-4">
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="chonTatCa" @onchange="OnChonTatCaChanged">
            <label class="form-check-label" for="chonTatCa">
                Ch·ªçn t·∫•t c·∫£
            </label>
        </div>

        <div class="d-flex align-items-center gap-3">
            <strong class="me-3">T·ªïng ti·ªÅn: @TongTien.ToString("N0") VNƒê</strong>
            @if (gioHang.Any(item => item.Chon == true))
            {
                <button class="btn-thanh-toan" @onclick="ThanhToan">Ti·∫øn h√†nh thanh to√°n</button>
            }
        </div>
    </div>
</div>    
}


@code {
    private ClaimsPrincipal? _currentUser;
    private List<GioHangItem> gioHang = new List<GioHangItem>();
    private int? maNguoiDung = null;

    public decimal TongTien => gioHang.Where(item => item.Chon == true).Sum(item => (decimal)(item.Gia ?? 0) * (item.SoLuong ?? 0));
    private bool isFirstRender = true;
    private string thongBaoNoiDung = "";
    @* private string thongBaoMauSac = "success";
    private bool hienThongBao = false; *@
    private bool showError = false;
  private string? errorMessage;

    private void ShowError(string message)
  {
      errorMessage = message;
      showError = true;
      _ = Task.Run(async () =>
      {
          await Task.Delay(3000);
          showError = false;
          await InvokeAsync(StateHasChanged);
      });
  }


    @* private void ShowSuccess(string message)
    {
        thongBaoNoiDung = message;
        thongBaoMauSac = "success";
        hienThongBao = true;
        StateHasChanged(); // C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o

        _ = Task.Run(async () =>
        {
            await Task.Delay(3000);
            hienThongBao = false;
            thongBaoNoiDung = ""; // X√≥a n·ªôi dung th√¥ng b√°o
            await InvokeAsync(StateHasChanged); // C·∫≠p nh·∫≠t UI ƒë·ªÉ ·∫©n th√¥ng b√°o
        });
    }

    private void AnThongBao()
    {
        hienThongBao = false;
        thongBaoNoiDung = "";
        StateHasChanged();
    } *@

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                _currentUser = authState.User;

                Console.WriteLine("User: " + _currentUser?.Identity?.Name);
                Console.WriteLine("UserId: " + _currentUser?.FindFirst("UserId")?.Value); // In m√£ ng∆∞·ªùi d√πng
                Console.WriteLine("Is Authenticated: " + _currentUser?.Identity?.IsAuthenticated);

                // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ch∆∞a x√°c th·ª±c
                if (_currentUser?.Identity == null || !_currentUser.Identity.IsAuthenticated)
                {
                    Console.WriteLine("User not authenticated.");
                    NavigationManager.NavigateTo("/dangnhap", true);
                    return;
                }
                var email = _currentUser.Identity.Name!;
                var nguoiDung = await DbContext.NguoiDungs.FirstOrDefaultAsync(u => u.Email == email);

                if (nguoiDung == null)
                {
                    NavigationManager.NavigateTo("/dangnhap", true);
                    return;
                }

                maNguoiDung = nguoiDung.MaNguoiDung;
                if (!_currentUser.IsInRole("User"))
                {
                    Console.WriteLine("User does not have Admin role. Redirecting to /home.");
                    NavigationManager.NavigateTo("/", true);
                    return;
                }

                // N·∫øu ƒë√£ x√°c th·ª±c v√† ƒë√∫ng vai tr√≤, t·∫£i gi·ªè h√†ng

            await LoadGioHangTuDb(maNguoiDung.Value);
                StateHasChanged(); // C·∫≠p nh·∫≠t l·∫°i UI sau khi t·∫£i gi·ªè h√†ng
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error during authentication check: " + ex.Message);
            }
        }
        isFirstRender = false;
    }

    private async Task LoadGioHangTuDb(int maNguoiDung)
    {

        var gioHangDb = await DbContext.GioHangs
            .Include(g => g.SanPham)
            .Where(g => g.MaNguoiDung == maNguoiDung && !g.SanPham.DaXoa)
            .ToListAsync();


        gioHang = gioHangDb.Select(g => new GioHangItem
        {
            MaSanPham = g.MaSanPham,
            TenSanPham = g.SanPham!.TenSanPham,
            MoTa = g.SanPham.MoTa,
            Gia = g.SanPham.Gia,
            AnhSanPham = g.SanPham.Anh,
            SoLuong = g.SoLuong,
            Chon = g.Chon ?? false
        }).ToList();
        int totalItems = gioHang.Sum(x => x.SoLuong ?? 0);
        CartService.SetCount(totalItems);
        Console.WriteLine($"[GioHang] ƒê·∫∑t l·∫°i CartService.SetCount({totalItems})");
        StateHasChanged();
    }

    

    public async Task ThemSanPhamVaoGioHang(int maSanPham)
    {
        if (maNguoiDung == null)
        {
            Console.WriteLine("Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p.");
            return;
        }

        var gioHangItem = await DbContext.GioHangs
            .FirstOrDefaultAsync(g => g.MaNguoiDung == maNguoiDung && g.MaSanPham == maSanPham);

        if (gioHangItem != null)
        {
            gioHangItem.SoLuong += 1;
            DbContext.GioHangs.Update(gioHangItem);
        }
        else
        {
            DbContext.GioHangs.Add(new GioHang
            {
                MaSanPham = maSanPham,
                SoLuong = 1,
                MaNguoiDung = maNguoiDung.Value
            });
        }

        await DbContext.SaveChangesAsync();
        await LoadGioHangTuDb(maNguoiDung.Value);
        StateHasChanged();
    }

    // n√†y l√† l∆∞u l·∫°i t·ª± ƒë·ªông l∆∞u csdl cho checkbox m b·∫£o ·∫•y
    private async Task LuuGioHangVaoDb()
    {
        if (maNguoiDung == null) return;
            // L·∫•y t·∫•t c·∫£ c√°c m·ª•c gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng t·ª´ database
        var gioHangDbItems = await DbContext.GioHangs
            .Where(g => g.MaNguoiDung == maNguoiDung)
            .ToListAsync();

        foreach (var item in gioHang)
        {
            var gioHangDbItem = await DbContext.GioHangs
                .FirstOrDefaultAsync(g => g.MaNguoiDung == maNguoiDung && g.MaSanPham == item.MaSanPham);

            if (gioHangDbItem != null)
            {
                gioHangDbItem.SoLuong = item.SoLuong ?? 0;
                gioHangDbItem.Chon = item.Chon ?? false;
                DbContext.GioHangs.Update(gioHangDbItem);
            }
            else
            {
                if ((item.SoLuong ?? 0) > 0)
                {
                    DbContext.GioHangs.Add(new GioHang
                    {
                        MaNguoiDung = maNguoiDung.Value,
                        MaSanPham = item.MaSanPham,
                        SoLuong = item.SoLuong ?? 1,
                        Chon = item.Chon ?? false
                    });
                }
            }
        }

        await DbContext.SaveChangesAsync();
    }
    private async Task ThayDoiSoLuongAsync(int maSanPham, int thayDoi)
    {
        var email = _currentUser?.Identity?.Name;
        var nguoiDung = await DbContext.NguoiDungs.FirstOrDefaultAsync(u => u.Email == email);
        if (nguoiDung == null) return;

        var sanPhamDb = await DbContext.SanPhams.Where(p => !p.DaXoa).FirstOrDefaultAsync(sp => sp.MaSanPham == maSanPham);
        if (sanPhamDb == null)
        {
            ShowError("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.");
            return;
        }

        int tonKho = sanPhamDb.SoLuong ?? 0;

        var gioHangItem = await DbContext.GioHangs
            .FirstOrDefaultAsync(g => g.MaNguoiDung == nguoiDung.MaNguoiDung && g.MaSanPham == maSanPham);

        if (gioHangItem != null)
        {
            int soLuongMoi = (gioHangItem.SoLuong ?? 0) + thayDoi;

            if (soLuongMoi > tonKho)
            {
                ShowError($"Ch·ªâ c√≤n {tonKho} s·∫£n ph·∫©m trong kho.");
                return;
            }

            gioHangItem.SoLuong = soLuongMoi;

            if (gioHangItem.SoLuong <= 0)
            {
                DbContext.GioHangs.Remove(gioHangItem);
            }

            await DbContext.SaveChangesAsync();
            await LoadGioHangTuDb(nguoiDung.MaNguoiDung);
        }
        else if (thayDoi > 0)
        {
            if (tonKho > 0)
            {
                // Th√™m s·∫£n ph·∫©m m·ªõi v√†o gi·ªè h√†ng
                DbContext.GioHangs.Add(new GioHang
                {
                    MaSanPham = maSanPham,
                    MaNguoiDung = nguoiDung.MaNguoiDung,
                    SoLuong = 1,
                    Chon = false
                });
                await DbContext.SaveChangesAsync();
                await LoadGioHangTuDb(nguoiDung.MaNguoiDung);
                ShowError("ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!");
               
            }
            else
            {
                ShowError("S·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng.");
            }
        }
    }

    @* private async Task CapNhatSoLuongTuInputAsync(int maSanPham, ChangeEventArgs e)
    {
        if (!int.TryParse(e.Value?.ToString(), out var soLuongMoi)) return;

        var email = _currentUser?.Identity?.Name;
        var nguoiDung = await DbContext.NguoiDungs.FirstOrDefaultAsync(u => u.Email == email);
        if (nguoiDung == null) return;

        var gioHangItem = await DbContext.GioHangs
            .FirstOrDefaultAsync(g => g.MaNguoiDung == nguoiDung.MaNguoiDung && g.MaSanPham == maSanPham);

        var sanPhamDb = await DbContext.SanPhams
            .FirstOrDefaultAsync(sp => sp.MaSanPham == maSanPham);

        if (sanPhamDb == null) return;

        int tonKho = sanPhamDb.SoLuong ?? 0;

        if (soLuongMoi > tonKho)
        {
            ShowError($"Ch·ªâ c√≤n {tonKho} s·∫£n ph·∫©m trong kho.");
            return;
        }

        if (gioHangItem != null)
        {
            gioHangItem.SoLuong = soLuongMoi;

            if (gioHangItem.SoLuong <= 0)
            {
                DbContext.GioHangs.Remove(gioHangItem);
            }

            await DbContext.SaveChangesAsync();
            await LoadGioHangTuDb(nguoiDung.MaNguoiDung);
        }
    } *@

    private async Task XoaSanPham(int maSanPham)
    {
        var itemToRemove = gioHang.FirstOrDefault(x => x.MaSanPham == maSanPham);
        if (itemToRemove != null)
        {
            gioHang.Remove(itemToRemove);

            if (maNguoiDung != null)
            {
                var gioHangDbItem = await DbContext.GioHangs
                    .FirstOrDefaultAsync(g => g.MaNguoiDung == maNguoiDung && g.MaSanPham == maSanPham);

                if (gioHangDbItem != null)
                {
                    DbContext.GioHangs.Remove(gioHangDbItem);
                    await DbContext.SaveChangesAsync();
                }
            }

            StateHasChanged();
        }
    }

    private async Task ThanhToan()
    {
        var selectedItems = gioHang.Where(item => item.Chon == true).ToList();
        if (selectedItems.Any())
        {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i "Chon" trong DB
            foreach (var item in gioHang)
            {
                var gioHangDbItem = await DbContext.GioHangs
                    .FirstOrDefaultAsync(g => g.MaNguoiDung == maNguoiDung && g.MaSanPham == item.MaSanPham);
                if (gioHangDbItem != null)
                {
                    gioHangDbItem.Chon = item.Chon ?? false;
                }
            }
            await DbContext.SaveChangesAsync();

            NavigationManager.NavigateTo("/dathang");
        }
        else
        {
            ShowError("Vui l√≤ng ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ thanh to√°n.");
        }
    }
    private void OnChonTatCaChanged(ChangeEventArgs e)
    {
        bool isChecked = (bool)e.Value!;
        foreach (var item in gioHang)
        {
            item.Chon = isChecked;
        }
        StateHasChanged();
    }
    private async Task CheckboxChanged(int maSanPham)
    {
        await LuuGioHangVaoDb();

        bool anySelected = gioHang.Any(item => item.Chon == true);
        StateHasChanged(); 
    }
        private async Task CheckboxChanged1(int maSanPham, bool isChecked)
    {
        if (maNguoiDung == null) return;

        // T√¨m m·ª•c GioHang t∆∞∆°ng ·ª©ng trong database
        var gioHangDbItem = await DbContext.GioHangs
            .FirstOrDefaultAsync(g => g.MaNguoiDung == maNguoiDung && g.MaSanPham == maSanPham);

        if (gioHangDbItem != null)
        {
            // C·∫≠p nh·∫≠t thu·ªôc t√≠nh Chon
            gioHangDbItem.Chon = isChecked; // G√°n gi√° tr·ªã c·ªßa checkbox cho thu·ªôc t√≠nh Chon trong database
            DbContext.GioHangs.Update(gioHangDbItem);
            await DbContext.SaveChangesAsync();

            // C·∫≠p nh·∫≠t l·∫°i danh s√°ch gioHang (n·∫øu c·∫ßn) ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªìng b·ªô UI
            await LoadGioHangTuDb(maNguoiDung.Value);
            StateHasChanged();
        }
    }
    public class GioHangItem
    {
        public int MaSanPham { get; set; }
        public string? TenSanPham { get; set; }
        public string? MoTa { get; set; }
        public float? Gia { get; set; }
        public string? AnhSanPham { get; set; }
        public int? SoLuong { get; set; }
        public bool? Chon { get; set; } = false;
    }

}