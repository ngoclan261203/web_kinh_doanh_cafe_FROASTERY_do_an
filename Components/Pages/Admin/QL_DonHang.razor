@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using FROASTERY.Services;
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor

@code {
    private ClaimsPrincipal? _currentUser;

    // Thay đổi từ OnInitializedAsync sang OnAfterRenderAsync
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Lấy trạng thái xác thực của người dùng
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                _currentUser = authState.User;

                // In thông tin người dùng và trạng thái xác thực
                Console.WriteLine("User: " + _currentUser?.Identity?.Name);
                Console.WriteLine("UserId: " + _currentUser?.FindFirst("UserId")?.Value); // In mã người dùng
                Console.WriteLine("Is Authenticated: " + _currentUser?.Identity?.IsAuthenticated);

                // Kiểm tra nếu người dùng chưa xác thực
                if (_currentUser?.Identity == null || !_currentUser.Identity.IsAuthenticated)
                {
                    Console.WriteLine("User not authenticated.");
                    // Chuyển hướng người dùng đến trang đăng nhập nếu chưa xác thực
                    Navigation.NavigateTo("/dangnhap", true);
                    return;
                }

                // Kiểm tra quyền Admin
                if (!_currentUser.IsInRole("Admin") &&
                !_currentUser.IsInRole("Kế toán") &&
                !_currentUser.IsInRole("Kinh doanh") &&
                !_currentUser.IsInRole("CSKH") )
                {
                    Console.WriteLine("User does not have Admin role. Redirecting to /home.");
                    // Chuyển hướng người dùng không phải Admin về trang chủ
                    Navigation.NavigateTo("/home_admin", true);
                }

                var email = _currentUser?.Identity?.Name;
                if (!string.IsNullOrEmpty(email))
                {
                    await LayMaNguoiDungTuEmailAsync(email);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error during authentication check: " + ex.Message);
            }
        }
    }

    private int? MaNguoiDung;

private async Task LayMaNguoiDungTuEmailAsync(string email)
{
    var nguoiDung = await DbContext.NguoiDungs
        .Where(u => u.Email == email)
        .FirstOrDefaultAsync();

    if (nguoiDung != null)
    {
        MaNguoiDung = nguoiDung.MaNguoiDung;
        Console.WriteLine("Mã người dùng: " + MaNguoiDung);
    }
    else
    {
        Console.WriteLine("Không tìm thấy người dùng với email: " + email);
    }
}

}




@page "/donhang"
@using Microsoft.EntityFrameworkCore
@inject AppDbContext DbContext
@inject IWebHostEnvironment Environment
@rendermode InteractiveServer
@using FROASTERY.Models
@using FROASTERY.Data
@using System.IO
@using FROASTERY.Components.Shared

<link rel="stylesheet" href="lib/bootstrap/dist/css/bootstrap.min.css" />
<link rel="stylesheet" href="custom.css" />

<ErrorDisplay ErrorMessage="@DbErrorMessage" OnClear="ClearErrorMessage" />

<PageTitle>Quản lý Đơn Hàng</PageTitle>

<div class="container mt-4">
    <h3 class="text-center mb-4">Quản lý Đơn Hàng</h3>
    <h5>@(Editing ? "Chỉnh sửa" : "Thêm mới") Đơn Hàng</h5>

    <EditForm Model="DonHang" OnValidSubmit="SaveAsync" class="border p-4 rounded shadow bg-light mb-4">
        <DataAnnotationsValidator />

        <div class="row mb-3">
            <div class="col-md-4">
                <label>Mã Đơn Hàng:</label>
                <input type="text" @bind="DonHang.MaDonHang" class="form-control mb-2" readonly />
                <label>Ngày Đặt:</label>
                <div class="position-relative mb-2 validation-wrapper">
                    <input type="datetime-local" @bind="DonHang.ThoiGian" class="form-control mb-2" />
                    @* <ValidationMessage For="@(() => DonHang.ThoiGian)" /> *@
                </div>
                <label>Loại Đơn:</label>
                <br>

                <div class="form-check d-inline-block me-3">
                    <input class="form-check-input" type="radio" name="LoaiDon" value="true"
                        @onchange="@(() => DonHang.LoaiDon = true)" checked="@DonHang.LoaiDon">
                    <label class="form-check-label">Đơn Sỉ</label>
                </div>
                <div class="form-check d-inline-block">
                    <input class="form-check-input" type="radio" name="LoaiDon" value="false"
                        @onchange="@(() => DonHang.LoaiDon = false)" checked="@(!DonHang.LoaiDon)">
                    <label class="form-check-label">Đơn Lẻ</label>
                </div>
            </div>


            <div class="col-md-4">
                @if (DonHang.LoaiDon == true)
                {
                    <label>Khách Hàng:</label>
                    <div class="position-relative mb-2 validation-wrapper">
                        <select class="form-control mb-2" @onchange="OnDoiTacChanged">
                            <option value="">-- Chọn Đối Tác --</option>
                            @foreach (var dt in DoiTacs)
                            {
                                <option value="@dt.MaDoiTac" selected="@((dt.MaDoiTac == SelectedDoiTacId))">@dt.Ten</option>
                            }
                        </select>
                        <ValidationMessage For="@(() => DonHang.Ten)" />
                    </div>
                    <label>Thông tin Liên Lạc:</label>
                    <input type="text" class="form-control mb-2" value="@DonHang.ThongTinLienLac" readonly />

                    <label>Địa Chỉ:</label>
                    <input type="text" class="form-control mb-2" value="@DonHang.DiaChi" readonly />

                }
                else
                {
                    <label>Khách Hàng:</label>
                    <div class="position-relative mb-2 validation-wrapper">
                        <input type="text" @bind="DonHang.Ten" class="form-control mb-2" />
                        <ValidationMessage For="@(() => DonHang.Ten)" />
                    </div>
                    <label>Thông tin Liên Lạc:</label>
                    <div class="position-relative mb-2 validation-wrapper">
                        <input type="text" @bind="DonHang.ThongTinLienLac" class="form-control mb-2" />
                        <ValidationMessage For="@(() => DonHang.ThongTinLienLac)" />
                    </div>
                    <label>Địa Chỉ:</label>
                    <div class="position-relative mb-2 validation-wrapper">
                        <input type="text" @bind="DonHang.DiaChi" class="form-control mb-2" />
                        <ValidationMessage For="@(() => DonHang.DiaChi)" />
                    </div>
                }
            </div>

            <div class="col-md-4">
                <label>Trạng Thái:</label>
                <select class="form-control mb-2" @bind="DonHang.TrangThai">
                    @foreach (var tt in TrangThaiList)
                    {
                        <option value="@tt">@tt</option>
                    }
                </select>

                <label>Phương Thức Thanh Toán:</label>
                <select class="form-control mb-2" @bind="DonHang.PhuongThucThanhToan">
                    <option value=""></option>
                    @foreach (var pt in PhuongThucList)
                    {
                        <option value="@pt">@pt</option>
                    }
                </select>

                <label>Mã Khuyến Mãi:</label>
                @* <select class="form-control mb-2" @bind="DonHang.MaKhuyenMai"  title="@(KhuyenMais.FirstOrDefault(km => km.MaSuKien == DonHang.MaKhuyenMai)?.NoiDung ?? "Không có khuyến mại")"> *@
                 <select class="form-control mb-2" @bind="DonHang.MaKhuyenMai"
        @bind:after="CapNhatTongTienVaTienGiam"  title="@(KhuyenMais.FirstOrDefault(km => km.MaSuKien == DonHang.MaKhuyenMai)?.NoiDung ?? "Không có khuyến mại")">
                    <option value=""></option>
                   @foreach (var km in KhuyenMais.Where(k => IsSuKienDangDienRa(k)))
                    {
                        <option value="@km.MaSuKien">@km.TieuDe</option>
                    }
                </select>

            </div>
        </div>
        
        <div class="d-flex justify-content-between align-items-center">
    <h5 class="d-inline-block">Thông tin Sản Phẩm</h5>
    <button type="button" @onclick="AddSanPham" class="btn btn-success btn-sm px-4 ms-3">Thêm Sản Phẩm</button>
</div>


        <table class="table mt-3">
            <thead>
                <tr>
                    <th>Sản Phẩm</th>
                    <th style="width: 200px">Số Lượng</th>
                    <th style="width: 250px">Giá Bán</th>
                    <th style="width: 250px">Thành Tiền</th>
                    <th style="width: 100px"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ct in ChiTietDonHangs)
                {
                    <tr>
                        <td>
                            <select @bind="ct.MaSanPham" @bind:after="CapNhatTongTienVaTienGiam" class="form-control">
                                @foreach (var sp in SanPhams)
                                {
                                    <option value="@sp.MaSanPham">@sp.TenSanPham</option>
                                }
                            </select>
                        </td>
                        <td>
                            <td>
    <input type="number" 
           value="@ct.SoLuong" 
           class="form-control"
           @oninput="(e) => OnSoLuongChanged(ct, e)" />
</td>

                            @* <input type="number" @bind="ct.SoLuong" class="form-control" @oninput="RecalculateTotal" /> *@
                        </td>
                        <td>
                            @GetGiaSanPham(ct.MaSanPham).ToString("N0") VNĐ
                        </td>

                        <td>@((ct.ThanhTien = (ct.SoLuong ?? 0) * GetGiaSanPham(ct.MaSanPham)).Value.ToString("N0")) VNĐ
                        </td>
                        <td>
                            <button type="button" @onclick="() => RemoveSanPham(ct)" class="btn btn-danger">Xóa</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

       <div class="row mt-4">
    <!-- Cột bên trái: Quà tặng -->
    <div class="col-md-6">
        <h5>Quà Tặng Kèm</h5>
        @if (QuaTangs != null && QuaTangs.Any())
        {
            <ul class="list-group">
                @foreach (var qt in QuaTangs)
                {
                    var tenSanPham = SanPhams.FirstOrDefault(sp => sp.MaSanPham == qt.MaSanPhamQuaTang)?.TenSanPham ?? "Không rõ";
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>@tenSanPham</span>
                        <span class="badge bg-primary rounded-pill">@qt.SoLuong</span>
                    </li>
                }
            </ul>
        }
        else
        {
            <p class="text-muted">Không có quà tặng nào kèm theo.</p>
        }
    </div>

    <!-- Cột bên phải: Tổng tiền -->
    <div class="col-md-6">
       
        @* <div class="border rounded p-3 bg-light">
            @{
                var TongTienTam = TinhTongTien();
                var tienGiam = TinhTienGiam();
                
                DonHang.TongTien = TongTienTam - tienGiam;
            }
            <div class="d-flex justify-content-between mb-2">
                <strong>Tổng Tiền:</strong>
                <span>@TongTienTam.ToString("N0") VNĐ</span>
            </div>
            <div class="d-flex justify-content-between mb-2">
                <strong>Giảm Giá:</strong>
                <span>@tienGiam.ToString("N0") VNĐ</span>
            </div>
            <div class="d-flex justify-content-between">
                <strong>Thành Tiền:</strong>
                <span>@DonHang.TongTien.Value.ToString("N0") VNĐ</span>
            </div>
        </div> *@
        <div class="border rounded p-3 bg-light">
        <div class="d-flex justify-content-between mb-2">
            <strong>Tổng Tiền:</strong>
            <span>@TongTienTamHienTai.ToString("N0") VNĐ</span>
        </div>
        <div class="d-flex justify-content-between mb-2">
            <strong>Giảm Giá:</strong>
            <span>@TienGiamHienTai.ToString("N0") VNĐ</span>
        </div>
        <div class="d-flex justify-content-between">
            <strong>Thành Tiền:</strong>
            <span>@DonHang.TongTien?.ToString("N0") VNĐ</span>
        </div>
    </div>
    </div>
</div>

        <div class="d-flex justify-content-center gap-3 mt-2">
            <button type="submit" class="btn btn-save">Lưu</button>
            <button type="button" class="btn btn-cancel" @onclick="ResetForm">Hủy</button>
        </div>
    </EditForm>


@code{

@* private void RecalculateTotal(ChangeEventArgs e)
    {
        StateHasChanged();
        CapNhatTongTienVaTienGiam();
    } *@
private void OnSoLuongChanged(ChiTietDonHang ct, ChangeEventArgs e)
{
    if (e.Value is not null && int.TryParse(e.Value.ToString(), out int newSoLuong))
    {
        ct.SoLuong = newSoLuong;
    }

    CapNhatTongTienVaTienGiam();
}

private float TienGiamHienTai;
    private float TongTienTamHienTai;
    
    private void CapNhatTongTienVaTienGiam()
    {
        TongTienTamHienTai = TinhTongTien();
        TienGiamHienTai = TinhTienGiam();
        DonHang.TongTien = TongTienTamHienTai - TienGiamHienTai;

        // GỌI cập nhật UI ngay
        StateHasChanged();
    }
 private float TinhTongTien()
    {
        return ChiTietDonHangs.Sum(ct => (ct.SoLuong ?? 0) * GetGiaSanPham(ct.MaSanPham));
    }
    
    private float TinhTienGiam()
{
    var tongTien = ChiTietDonHangs.Sum(ct => (ct.SoLuong ?? 0) * GetGiaSanPham(ct.MaSanPham));
    var khuyenMai = KhuyenMais.FirstOrDefault(km => km.MaSuKien == DonHang.MaKhuyenMai && IsSuKienHopLe(km));
    
    if (khuyenMai == null)
        return 0;
    QuaTangs.Clear();  // Reset quà trước khi tính lại
    @* QuaTangs = new List<ChiTietQuaTangDonHang>(); *@

    float tongGiam = 0;

    foreach (var ct in khuyenMai.DieuKienKhuyenMais)
    {
        @* Console.WriteLine($"--- Đang xét điều kiện: KieuApDung={ct.KieuApDung}, KieuGiam={ct.KieuGiam}, GiaTriGiam={ct.GiaTriGiam}"); *@
        if (ct.KieuApDung == "Đơn hàng")
        {
            // Check nếu tổng tiền đơn hàng nằm trong khoảng áp dụng
            if ((ct.GiaTriDonHangTu == null || tongTien >= ct.GiaTriDonHangTu) && 
                (ct.GiaTriDonHangDen == null || tongTien <= ct.GiaTriDonHangDen))
            {
                if (ct.KieuGiam == "%")
                {
                    tongGiam += tongTien * ((ct.GiaTriGiam ?? 0f) / 100f);

                }
                else if (ct.KieuGiam== "VNĐ")
                {
                    tongGiam += (ct.GiaTriGiam ?? 0f);
                }
                // ✅ Xử lý quà khi ĐỦ điều kiện

                      XuLyQuaTang(ct);

                 }
        }
        else if (ct.KieuApDung == "Sản phẩm")
        {
            foreach (var ctDonHang in ChiTietDonHangs)
            {
                if (ct.DKSanPhams.Any(x => x.MaSanPham == ctDonHang.MaSanPham))
                {
                    var soLuong = ctDonHang.SoLuong ?? 0;
                    var giaGoc = GetGiaSanPham(ctDonHang.MaSanPham);

                    if (ct.KieuGiam == "%")
                    {
                        tongGiam += soLuong * giaGoc * ((ct.GiaTriGiam ?? 0f) / 100f);
                    }
                    else if (ct.KieuGiam == "VNĐ")
                    {
                        tongGiam += soLuong * (ct.GiaTriGiam ?? 0f);
                    }
                     XuLyQuaTang(ct, soLuong);
                }
            }
    
        }
        else
        {
            if (ct.KieuGiam == "%")
                {
                    tongGiam += tongTien * ((ct.GiaTriGiam ?? 0f) / 100f);

                }
                else if (ct.KieuGiam== "VNĐ")
                {
                    tongGiam += (ct.GiaTriGiam ?? 0f);
                }
            // ✅ Trường hợp khác (null hoặc không phải Đơn hàng/SP) vẫn xử lý quà
            XuLyQuaTang(ct);
        }
    }
    
    return tongGiam;
}
@* private void XuLyQuaTang(DieuKienKhuyenMai dieuKien, int soLanNhanQua = 1)
{
    if (dieuKien.QuaTangs != null && dieuKien.QuaTangs.Any())
    {
        foreach (var qua in dieuKien.QuaTangs)
        {
            var existing = QuaTangs.FirstOrDefault(q => q.MaSanPhamQuaTang == qua.MaSanPham);
            if (existing != null)
            {
                existing.SoLuong += (qua.SoLuong ?? 0) * soLanNhanQua;
            }
            else
            {
                QuaTangs.Add(new ChiTietQuaTangDonHang
                {
                    MaSanPhamQuaTang = qua.MaSanPham,
                    SoLuong = (qua.SoLuong ?? 0) * soLanNhanQua
                });
            }
        }
    }
} *@

private void XuLyQuaTang(DieuKienKhuyenMai dieuKien, int soLuongMua = 1)
{
    if (dieuKien.QuaTangs != null && dieuKien.QuaTangs.Any())
    {
        foreach (var qua in dieuKien.QuaTangs)
        {
            // Nếu khuyến mãi có quy định số lượng yêu cầu (ví dụ: mua 5 mới tặng)
            int soLuongYeuCau = dieuKien.SoLuongYeuCau ?? 1;  // Mặc định là 1 nếu không set

            // Tính số lần đạt điều kiện
            int soLanNhanQua = soLuongMua / soLuongYeuCau;

            if (soLanNhanQua > 0)
            {
                var existing = QuaTangs.FirstOrDefault(q => q.MaSanPhamQuaTang == qua.MaSanPham);
                if (existing != null)
                {
                    existing.SoLuong += (qua.SoLuong ?? 0) * soLanNhanQua;
                }
                else
                {
                    QuaTangs.Add(new ChiTietQuaTangDonHang
                    {
                        MaSanPhamQuaTang = qua.MaSanPham,
                        SoLuong = (qua.SoLuong ?? 0) * soLanNhanQua
                    });
                }
            }
        }
    }
}

private bool IsSuKienHopLe(SuKien suKien)
{
    var thoiGianDonHang = DonHang.ThoiGian;

    // Nếu không có thời gian bắt đầu và kết thúc -> áp dụng không giới hạn (hoặc false nếu bạn muốn vậy)
    if (!suKien.ThoiGianBatDau.HasValue && !suKien.ThoiGianKetThuc.HasValue)
    {
        return true;  // hoặc false nếu bạn muốn không hợp lệ khi cả 2 null
    }

    // Nếu chỉ có thời gian bắt đầu
    if (suKien.ThoiGianBatDau.HasValue && !suKien.ThoiGianKetThuc.HasValue)
    {
        if (thoiGianDonHang < suKien.ThoiGianBatDau.Value)
        {
            return false;
        }
    }

    // Nếu chỉ có thời gian kết thúc
    if (!suKien.ThoiGianBatDau.HasValue && suKien.ThoiGianKetThuc.HasValue)
    {
        if (thoiGianDonHang > suKien.ThoiGianKetThuc.Value)
        {
            return false;
        }
    }

    // Nếu có cả bắt đầu và kết thúc
    if (suKien.ThoiGianBatDau.HasValue && suKien.ThoiGianKetThuc.HasValue)
    {
        if (thoiGianDonHang < suKien.ThoiGianBatDau.Value || thoiGianDonHang > suKien.ThoiGianKetThuc.Value)
        {
            return false;
        }
    }

    // Check ngày trong tuần nếu có cài lặp lại
    if (suKien.NgayLapLai != null && suKien.NgayLapLai.Any())
    {
        if (thoiGianDonHang.HasValue)
        {
            var thuTrongTuan = GetThuTiengViet(thoiGianDonHang.Value.DayOfWeek);
            if (!suKien.NgayLapLai.Contains(thuTrongTuan))
            {
                return false;
            }
        }
    }

    return true;
}


    private string GetThuTiengViet(DayOfWeek dayOfWeek)
    {
        return dayOfWeek switch
        {
            DayOfWeek.Monday => "Thứ 2",
            DayOfWeek.Tuesday => "Thứ 3",
            DayOfWeek.Wednesday => "Thứ 4",
            DayOfWeek.Thursday => "Thứ 5",
            DayOfWeek.Friday => "Thứ 6",
            DayOfWeek.Saturday => "Thứ 7",
            DayOfWeek.Sunday => "Chủ nhật",
            _ => ""
        
        };
    }

}

<div class="card p-3 mb-4 shadow-sm">
    <div class="row g-2 align-items-end">
        <!-- Ô tìm kiếm từ khóa -->
        <div class="col-md-4">
            <label class="form-label">Tìm kiếm</label>
            <input type="text" @bind="SearchQuery" class="form-control"
                   placeholder="Mã hóa đơn, thông tin khách hàng, sản phẩm..." />
        </div>

        <div class="col-md-2">
            <label class="form-label">Tổng tiền từ</label>
            <input type="number" @bind="MinTongTien" class="form-control" step="0.01" placeholder="0" />
        </div>

        <div class="col-md-2">
            <label class="form-label">Tổng tiền đến</label>
            <input type="number" @bind="MaxTongTien" class="form-control" step="0.01" placeholder="∞" />
        </div>

        <div class="col-md-2">
            <label class="form-label">Từ ngày</label>
            <input type="date" @bind="StartDate" class="form-control" />
        </div>

        <div class="col-md-2">
            <label class="form-label">Đến ngày</label>
            <input type="date" @bind="EndDate" class="form-control" />
        </div>

    </div>

    <!-- Nút tìm kiếm nằm dưới và căn phải -->
     <div class="row g-2 align-items-end mt-3">
    <!-- Combobox Loại đơn -->
    <div class="col-md-2">
        <label class="form-label">Loại đơn</label>
        <select @bind="SelectedLoaiDon" class="form-select">
            <option value="">Tất cả</option>
            <option value="true">Đơn sỉ</option>
            <option value="false">Đơn lẻ</option>
        </select>
    </div>

    <!-- Combobox Trạng thái -->
    <div class="col-md-2">
        <label class="form-label">Trạng thái</label>
        <select @bind="SelectedTrangThai" class="form-select">
            <option value="">Tất cả</option>
            @foreach (var trangThai in TrangThaiList)
            {
                <option value="@trangThai">@trangThai</option>
            }
        </select>
    </div>

    <!-- Nút tìm kiếm đẩy ra phải -->
    <div class="col-md-2 d-flex align-items-end ms-auto">
        <button @onclick="Search" class="btn btn-success px-4 w-100">Tìm kiếm</button>
    </div>
</div>

</div>

@code {
   private bool IsSuKienDangDienRa(SuKien suKien)
{
    var now = DateTime.Now;

    // Nếu không có bắt đầu và kết thúc → coi là đang diễn ra (vì không giới hạn)
    if (!suKien.ThoiGianBatDau.HasValue && !suKien.ThoiGianKetThuc.HasValue)
        return true;

    // Nếu chỉ có bắt đầu
    if (suKien.ThoiGianBatDau.HasValue && !suKien.ThoiGianKetThuc.HasValue)
    {
        return now >= suKien.ThoiGianBatDau.Value;
    }

    // Nếu chỉ có kết thúc
    if (!suKien.ThoiGianBatDau.HasValue && suKien.ThoiGianKetThuc.HasValue)
    {
        return now <= suKien.ThoiGianKetThuc.Value;
    }

    // Nếu có cả bắt đầu và kết thúc
    if (suKien.ThoiGianBatDau.HasValue && suKien.ThoiGianKetThuc.HasValue)
    {
        return now >= suKien.ThoiGianBatDau.Value && now <= suKien.ThoiGianKetThuc.Value;
    }

    // Mặc định không hợp lệ
    return false;
}


    private string? SearchQuery;
    private float? MinTongTien { get; set; }
    private float? MaxTongTien { get; set; }
    private DateTime? StartDate { get; set; }
    private DateTime? EndDate { get; set; }
    private string? SelectedLoaiDon { get; set; } = "";
    private string? SelectedTrangThai { get; set; } = "";

    private bool? GetLoaiDonBool()
    {
        if (bool.TryParse(SelectedLoaiDon, out var result))
        {
            return result;
        }
        return null;
    }

    private void Search()
    {
        var trimmedQuery = SearchQuery?.Trim();
        
            DonHangs = FullDonHangs.Where(item =>
                (
                     // Nếu không nhập gì thì bỏ qua điều kiện tìm từ khóa
                    string.IsNullOrWhiteSpace(trimmedQuery) ||
                    item.MaDonHang.ToString().Contains(trimmedQuery, StringComparison.OrdinalIgnoreCase) ||
                    (item.Ten.Contains(trimmedQuery, StringComparison.OrdinalIgnoreCase) == true) ||
                    (item.ThongTinLienLac?.Contains(trimmedQuery, StringComparison.OrdinalIgnoreCase) == true) ||
                    (item.DiaChi?.Contains(trimmedQuery, StringComparison.OrdinalIgnoreCase) == true) ||
                    (item.ChiTietDonHangs.Any(ct =>
                        ct.SanPham?.TenSanPham.Contains(trimmedQuery, StringComparison.OrdinalIgnoreCase) == true) == true)
                ) 
                &&
                (
                    // Lọc theo khoảng thời gian
                    (!StartDate.HasValue || (item.ThoiGian.HasValue && item.ThoiGian.Value.Date >= StartDate.Value.Date)) &&
                    (!EndDate.HasValue || (item.ThoiGian.HasValue && item.ThoiGian.Value.Date <= EndDate.Value.Date))
                )
                &&
                (
                    // Lọc theo tổng tiền từ Min đến Max
                    (!MinTongTien.HasValue || item.TongTien >= MinTongTien) &&
                    (!MaxTongTien.HasValue || item.TongTien <= MaxTongTien)
                )
                &&
                (
                    // Lọc theo loại đơn
                   string.IsNullOrEmpty(SelectedLoaiDon) || (item.LoaiDon == GetLoaiDonBool())
                )
                &&
                (
                    // Lọc theo trạng thái đơn
                   string.IsNullOrEmpty(SelectedTrangThai) || item.TrangThai == SelectedTrangThai
                )

            ).ToList();
             DonHangs.Reverse();
        
    }
}

    <!-- Bảng danh sách đơn hàng -->
    <div class="table-responsive">
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th style="width: 38px">Mã</th>
                    <th style="width: 100px">Ngày Đặt</th>
                    <th style="width: 40px">Loại Đơn</th>
                    <th>Khách Hàng</th>
                    <th style="width: 100px">Thông tin Liên Lạc</th>
                    <th>Địa Chỉ</th>
                    <th>Chi Tiết</th>
                    <th style="width: 60px">Khuyến mại</th>
                    <th style="width: 80px">Tổng Tiền</th>
                    <th style="width: 98px">PT Thanh Toán</th>
                    <th style="width: 60px">Trạng Thái</th>
                    <th>Quà Tặng</th>
                    <th style="width: 38px">Mã ND</th>
                    <th style="width: 128px">Hành Động</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var dh in DonHangs)
                {
                    <tr>
                        <td>@dh.MaDonHang</td>
                        <td>@dh.ThoiGian?.ToString("dd/MM/yyyy HH:mm")</td>
                        <td>@(dh.LoaiDon == true ? "Đơn Sỉ" : "Đơn Lẻ")</td>
                        <td>@dh.Ten</td>
                        <td>@dh.ThongTinLienLac</td>
                        <td>@dh.DiaChi</td>
                        <td>
                            @if (SanPhamsAll != null && dh.ChiTietDonHangs != null)
                            {
                                <ul>
                                    @foreach (var ct in dh.ChiTietDonHangs)
                                    {
                                        var sp = SanPhamsAll.FirstOrDefault(s => s.MaSanPham == ct.MaSanPham);
                                        if (sp != null)
                                        {
                                            <li>@sp.TenSanPham (@ct.SoLuong) - @( sp.Gia.HasValue ? sp.Gia.Value.ToString("N0") : "0")
                                                VNĐ</li>

                                        }
                                    }
                                </ul>
                            }
                        </td>
                        <td title="@(KhuyenMaisAll.FirstOrDefault(km => km.MaSuKien == dh.MaKhuyenMai)?.NoiDung ?? "Không có khuyến mại")">
                            @dh.MaKhuyenMai
                        </td>

                        <td>@(dh.TongTien.HasValue? dh.TongTien.Value.ToString("N0") : "0") VNĐ</td>
                        <td>@dh.PhuongThucThanhToan</td>
                        <td>@dh.TrangThai</td>
                        <td>
                            @if (dh.ChiTietQuaTangDonHangs != null && dh.ChiTietQuaTangDonHangs.Any())
                            {
                                <ul>
                                    @foreach (var qt in dh.ChiTietQuaTangDonHangs)
                                    {
                                    var spQuaTang = SanPhamsAll?.FirstOrDefault(s => s.MaSanPham == qt.MaSanPhamQuaTang);
                                    if (spQuaTang != null)
                                    {
                                        <li>@spQuaTang.TenSanPham (@qt.SoLuong)</li>
                                    }
                                    
                                    }
                                </ul>
                            }
                        </td>
                        <td>@dh.MaNguoiDung</td>
                        <td>
                            <button @onclick="() => Edit(dh)" class="btn btn-warning mb-1">Sửa</button>
                            <button @onclick="() => DeleteAsync(dh.MaDonHang)" class="btn btn-danger">Xóa</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>



@code {
    private List<DonHang> DonHangs = new();
    private List<DonHang> FullDonHangs = new();
    private List<SanPham> SanPhams = new();
        private List<SanPham> SanPhamsAll = new();
    private List<ChiTietDonHang> ChiTietDonHangs = new();
    private List<DoiTac> DoiTacs = new();
    private List<SuKien> KhuyenMais = new();
        private List<SuKien> KhuyenMaisAll = new();
    private List<ChiTietQuaTangDonHang> QuaTangs = new();
    private DonHang DonHang = new();
    private bool Editing = false;

    private List<string> TrangThaiList = new()
    {
    "Chưa duyệt", "Đã duyệt", "Đang thực hiện", "Đã hoàn thành", "Đã hủy"
    };
    private List<string> PhuongThucList = new()
    {
    "Thanh toán khi nhận hàng", "Thanh toán qua ngân hàng"
    };

    protected override async Task OnInitializedAsync()
    {
        FullDonHangs = await DbContext.DonHangs
        .Include(d => d.DoiTac) // Nếu bạn cần luôn đối tác
        .Include(d => d.KhuyenMai) // Nếu cần load khuyến mãi đơn hàng
        .Include(d => d.ChiTietDonHangs)
            .ThenInclude(ct => ct.SanPham) // Nếu ChiTietDonHang có navigation đến SanPham
        .Include(d => d.ChiTietQuaTangDonHangs)
            .ThenInclude(qt => qt.SanPhamQuaTang) // Nếu ChiTietQuaTangDonHang có navigation đến QuaTang
        .Where(p => !p.DaXoa)
        .AsNoTracking()
        .ToListAsync();

    DonHangs = new List<DonHang>(FullDonHangs);

        SanPhams = await DbContext.SanPhams.AsNoTracking().Where(p => !p.DaXoa).ToListAsync();
         SanPhamsAll = await DbContext.SanPhams.AsNoTracking().ToListAsync();

         DoiTacs = await DbContext.DoiTacs
        .Where(d => d.KhachHang == true && !d.DaXoa)
        .AsNoTracking()
        .ToListAsync();
        
       KhuyenMais = await DbContext.SuKiens
    .Where(sk => sk.MaLoaiTin == 2 )
    .Include(sk => sk.DieuKienKhuyenMais)
        .ThenInclude(ct => ct.DKSanPhams)
    .Include(sk => sk.DieuKienKhuyenMais)
        .ThenInclude(ct => ct.QuaTangs) 
    .Where(p => !p.DaXoa) // <-- thêm dòng này!
    .ToListAsync();

    KhuyenMaisAll = await DbContext.SuKiens
    .Where(sk => sk.MaLoaiTin == 2 )
    .Include(sk => sk.DieuKienKhuyenMais)
        .ThenInclude(ct => ct.DKSanPhams)
    .Include(sk => sk.DieuKienKhuyenMais)
        .ThenInclude(ct => ct.QuaTangs) 
    .ToListAsync();

     DonHangs.Reverse(); // đảo danh sách ngay sau khi load
     
    }
    
@*     
    private async Task<bool> KiemTraKhoDuAsync(
    List<ChiTietDonHang> chiTietDonHangs, 
    List<ChiTietQuaTangDonHang> quaTangs)
{
    // 1. Gộp đơn hàng và quà tặng lại theo MaSanPham
    var tongHop = chiTietDonHangs
        .Concat(quaTangs.Select(q => new ChiTietDonHang
        {
            MaSanPham = q.MaSanPhamQuaTang,
            SoLuong = q.SoLuong
        }))
        .GroupBy(x => x.MaSanPham)
        .Select(g => new 
        {
            MaSanPham = g.Key,
            TongSoLuong = g.Sum(x => x.SoLuong)
        })
        .ToList();

    // 2. Kiểm tra từng sản phẩm
    foreach (var item in tongHop)
    {
        var sanPham = await DbContext.SanPhams
            .FirstOrDefaultAsync(sp => sp.MaSanPham == item.MaSanPham);

        if (sanPham != null)
        {
            var soLuongTonKho = sanPham.SoLuong ?? 0;
            if (soLuongTonKho < (item.TongSoLuong ?? 0))
            {
                DbErrorMessage = $"Sản phẩm '{sanPham.TenSanPham}' không đủ số lượng trong kho. Hiện còn {soLuongTonKho}.";
                return false;
            }
        }
        else
        {
            DbErrorMessage = $"Không tìm thấy sản phẩm với mã {item.MaSanPham}.";
            return false;
        }
    }

    return true;
} *@
private async Task<bool> KiemTraKhoDuAsync(
    List<ChiTietDonHang> chiTietMoi,
    List<ChiTietQuaTangDonHang> quaTangMoi,
    List<ChiTietDonHang> chiTietCu,
    List<ChiTietDonHang> quaTangCu)
{
    // Gộp mới
    var tongMoi = chiTietMoi
        .Concat(quaTangMoi.Select(q => new ChiTietDonHang
        {
            MaSanPham = q.MaSanPhamQuaTang,
            SoLuong = q.SoLuong
        }))
        .GroupBy(x => x.MaSanPham)
        .ToDictionary(g => g.Key, g => g.Sum(x => x.SoLuong));

    // Gộp cũ
    var tongCu = chiTietCu
        .Concat(quaTangCu)
        .GroupBy(x => x.MaSanPham)
        .ToDictionary(g => g.Key, g => g.Sum(x => x.SoLuong));

    // Lấy danh sách tất cả sản phẩm (cũ + mới)
    var allKeys = tongMoi.Keys.Union(tongCu.Keys);

    foreach (var maSp in allKeys)
    {
        var moi = tongMoi.ContainsKey(maSp) ? tongMoi[maSp] : 0;
        var cu = tongCu.ContainsKey(maSp) ? tongCu[maSp] : 0;

        var chenhlech = moi - cu;  // nếu âm thì đang giảm, dương là tăng

        if (chenhlech > 0)
        {
            var sanPham = await DbContext.SanPhams.FirstOrDefaultAsync(sp => sp.MaSanPham == maSp);
            if (sanPham != null)
            {
                var soLuongTonKho = sanPham.SoLuong ?? 0;
                if (soLuongTonKho < chenhlech)
                {
                    DbErrorMessage = $"Sản phẩm '{sanPham.TenSanPham}' không đủ kho để cập nhật đơn. Hiện còn {soLuongTonKho}, cần thêm {chenhlech}.";
                    return false;
                }
            }
            else
            {
                DbErrorMessage = $"Không tìm thấy sản phẩm với mã {maSp}.";
                return false;
            }
        }
    }

    return true;
}


    private async Task SaveAsync()
    {
        DbErrorMessage = null;
        if (!ValidateChiTiet())
    {
        return;
    }

    // Kiểm tra kho trước
// Kiểm tra kho trước
// Kiểm tra kho trước
bool khoDu = true; // mặc định là true, không cần kiểm tra nếu là Đã hủy

if (Editing)
{
    var trangThaiMoi = DonHang.TrangThai;  // trạng thái mới đang chỉnh sửa
    var existing = await DbContext.DonHangs
        .AsNoTracking()
        .FirstOrDefaultAsync(d => d.MaDonHang == DonHang.MaDonHang);

    if (existing != null)
    {
        bool chuyenTuHuySangHoatDong = existing.TrangThai == "Đã hủy" && trangThaiMoi != "Đã hủy";
        bool giuNguyenTrangThai = existing.TrangThai != "Đã hủy" && trangThaiMoi != "Đã hủy";

        if (chuyenTuHuySangHoatDong)
        {
            // Vì đơn cũ là Đã hủy, cần kiểm tra toàn bộ mới (không trừ gì cả)
            khoDu = await KiemTraKhoDuAsync(
                ChiTietDonHangs,
                QuaTangs,
                new List<ChiTietDonHang>(),  // trống vì đơn cũ không trừ kho
                new List<ChiTietDonHang>()   // trống vì đơn cũ không trừ kho
            );
        }
        else if (giuNguyenTrangThai)
        {
            // Đơn hoạt động -> hoạt động: so sánh cũ/mới như bình thường
            khoDu = await KiemTraKhoDuAsync(
                ChiTietDonHangs,
                QuaTangs,
                ChiTietCu,
                QuaTangCu
            );
        }

    }
}
else
{
    // Đơn mới thì chỉ kiểm tra kho nếu không phải Đã hủy
    if (DonHang.TrangThai != "Đã hủy")
    {
        khoDu = await KiemTraKhoDuAsync(
            ChiTietDonHangs,
            QuaTangs,
            new List<ChiTietDonHang>(),
            new List<ChiTietDonHang>()
        );
    }
}

if (!khoDu)
{
    return;
}


        if (Editing)
        {
            var existing = await DbContext.DonHangs
                .Include(d => d.ChiTietDonHangs)
                .Include(d => d.ChiTietQuaTangDonHangs)
                .FirstOrDefaultAsync(d => d.MaDonHang == DonHang.MaDonHang);

            if (existing != null)
            {   
                var trangThaiCu = existing.TrangThai;
                var trangThaiMoi = DonHang.TrangThai;
                var quaTangAsChiTiet = QuaTangs.Select(q => new ChiTietDonHang
                {
                    MaSanPham = q.MaSanPhamQuaTang,
                    SoLuong = q.SoLuong
                }).ToList();
                bool chuyenTuHuySangHoatDong = (trangThaiCu == "Đã hủy" && trangThaiMoi != "Đã hủy");
                bool chuyenTuHoatDongSangHuy = (trangThaiCu != "Đã hủy" && trangThaiMoi == "Đã hủy");
                bool giuNguyenTrangThai = (trangThaiCu != "Đã hủy" && trangThaiMoi != "Đã hủy");

                float tongTienCu = existing.TongTien ?? 0f;
                float tongTienMoi = DonHang.TongTien ?? 0f;
                int? maDoiTacCu = existing.MaDoiTac;
                int? maDoiTacMoi = DonHang.MaDoiTac;
            if (chuyenTuHuySangHoatDong)
            {
                await CapNhatDuNoDoiTacAsync(null, DonHang.MaDoiTac, 0f, DonHang.TongTien ?? 0f);
                // Trừ kho vì trước đây đơn bị hủy
                await CapNhatKhoTheoChiTietAsync(new List<ChiTietDonHang>(), ChiTietDonHangs);
                await CapNhatKhoTheoChiTietAsync(new List<ChiTietDonHang>(), quaTangAsChiTiet);
            }
            else if (chuyenTuHoatDongSangHuy)
            {
                 await CapNhatDuNoDoiTacAsync(maDoiTacCu, null, tongTienCu, 0f);
                // Cộng lại kho vì đơn giờ bị hủy
                await CapNhatKhoTheoChiTietAsync(ChiTietDonHangs, new List<ChiTietDonHang>());
                await CapNhatKhoTheoChiTietAsync(quaTangAsChiTiet, new List<ChiTietDonHang>());
            }
            else if (giuNguyenTrangThai)
            {
                await CapNhatDuNoDoiTacAsync(maDoiTacCu, maDoiTacMoi, tongTienCu, tongTienMoi);
                // Đơn hoạt động ➔ hoạt động: cập nhật kho theo chi tiết cũ/mới
                await CapNhatKhoTheoChiTietAsync(ChiTietCu, ChiTietDonHangs);
                await CapNhatKhoTheoChiTietAsync(QuaTangCu, quaTangAsChiTiet);
            }
                

                existing.ThoiGian = DonHang.ThoiGian;
                existing.LoaiDon = DonHang.LoaiDon;
                existing.Ten = DonHang.Ten;
                existing.ThongTinLienLac = DonHang.ThongTinLienLac;
                existing.DiaChi = DonHang.DiaChi;
                existing.MaDoiTac = DonHang.MaDoiTac;
                existing.MaKhuyenMai = DonHang.MaKhuyenMai;
                existing.TongTien = DonHang.TongTien;
                existing.PhuongThucThanhToan = DonHang.PhuongThucThanhToan;
                existing.TrangThai = DonHang.TrangThai;

                // Cập nhật lại chi tiết: xóa cũ, thêm mới
                existing.ChiTietDonHangs.Clear();
                foreach (var ct in ChiTietDonHangs)
                {
                    existing.ChiTietDonHangs.Add(new ChiTietDonHang
                    {
                        MaSanPham = ct.MaSanPham,
                        SoLuong = ct.SoLuong,
                        ThanhTien = ct.ThanhTien
                    });
                }
                existing.ChiTietQuaTangDonHangs.Clear();
                foreach (var ct in QuaTangs)
                {
                    existing.ChiTietQuaTangDonHangs.Add(new ChiTietQuaTangDonHang
                {
                    MaDonHang = existing.MaDonHang,
                    MaSanPhamQuaTang = ct.MaSanPhamQuaTang,
                    SoLuong = ct.SoLuong
                });
                }

                await DbContext.SaveChangesAsync();
            }
        }
        else
        {
            DonHang.MaNguoiDung = MaNguoiDung;

            await DbContext.DonHangs.AddAsync(DonHang);
            await DbContext.SaveChangesAsync();

            foreach (var ct in ChiTietDonHangs)
            {
                ct.MaDonHang = DonHang.MaDonHang;
                await DbContext.ChiTietDonHangs.AddAsync(ct);
            }
            foreach (var qt in QuaTangs)
            {
                await DbContext.ChiTietQuaTangDonHangs.AddAsync(new ChiTietQuaTangDonHang
                {
                    MaDonHang = DonHang.MaDonHang,
                    MaSanPhamQuaTang = qt.MaSanPhamQuaTang,
                    SoLuong = qt.SoLuong
                });
            }

            await DbContext.SaveChangesAsync();
            if (DonHang.TrangThai != "Đã hủy")
            {
                await CapNhatDuNoDoiTacAsync(null, DonHang.MaDoiTac, 0f, DonHang.TongTien ?? 0f);
                await CapNhatKhoTheoChiTietAsync(new List<ChiTietDonHang>(), ChiTietDonHangs);
                var quaTangAsChiTiet = QuaTangs.Select(q => new ChiTietDonHang
                    {
                        MaSanPham = q.MaSanPhamQuaTang,
                        SoLuong = q.SoLuong
                    }).ToList();
                await CapNhatKhoTheoChiTietAsync( new List<ChiTietDonHang>(), quaTangAsChiTiet);
                await DbContext.SaveChangesAsync();
            }
        }

        await OnInitializedAsync();
        ResetForm();
    }


    private List<ChiTietDonHang> ChiTietCu = new();
     private List<ChiTietDonHang> QuaTangCu = new();
    private void Edit(DonHang dh)
    {
        DonHang = new DonHang
        {
            MaDonHang = dh.MaDonHang,
            LoaiDon = dh.LoaiDon,
            ThoiGian = dh.ThoiGian,
            Ten = dh.Ten,
            ThongTinLienLac = dh.ThongTinLienLac,
            DiaChi = dh.DiaChi,
            MaDoiTac = dh.MaDoiTac,
            MaKhuyenMai = dh.MaKhuyenMai,
            TongTien = dh.TongTien,
            PhuongThucThanhToan = dh.PhuongThucThanhToan,
            TrangThai = dh.TrangThai

        };
        ChiTietDonHangs = dh.ChiTietDonHangs?.Select(c => new ChiTietDonHang
        {
            MaSanPham = c.MaSanPham,
            SoLuong = c.SoLuong,
            ThanhTien = c.ThanhTien
        }).ToList() ?? new List<ChiTietDonHang>();

            QuaTangs = dh.ChiTietQuaTangDonHangs?
        .Select(q => new ChiTietQuaTangDonHang
        {
            MaSanPhamQuaTang = q.MaSanPhamQuaTang,
            SoLuong = q.SoLuong
        })
        .ToList() ??new List<ChiTietQuaTangDonHang>();

        ChiTietCu = ChiTietDonHangs.Select(c => new ChiTietDonHang
            {
                MaSanPham = c.MaSanPham,
                SoLuong = c.SoLuong,
                ThanhTien = c.ThanhTien
            }).ToList();
        QuaTangCu = QuaTangs.Select(q => new ChiTietDonHang
            {
                MaSanPham = q.MaSanPhamQuaTang,
                SoLuong = q.SoLuong
            }).ToList();

        // Gán lại SelectedDoiTacId nếu là đơn sỉ
        if (dh.LoaiDon == true && dh.MaDoiTac.HasValue)
        {
            SelectedDoiTacId = dh.MaDoiTac.Value;
        }
        else
        {
            SelectedDoiTacId = null;
        }
        Editing = true;
    }

    private async Task CapNhatDuNoDoiTacAsync(int? maDoiTacCu, int? maDoiTacMoi, float tongTienCu, float tongTienMoi)
{
    // 1. Cập nhật đối tác mới (nếu có)
    if (maDoiTacMoi.HasValue)
    {
        var doiTacMoi = await DbContext.DoiTacs.FirstOrDefaultAsync(dt => dt.MaDoiTac == maDoiTacMoi.Value);
        if (doiTacMoi != null)
        {
            float chenhlech = tongTienMoi;
            if (maDoiTacCu == maDoiTacMoi)
            {
                // Nếu không đổi đối tác, chỉ tính chênh lệch
                chenhlech = tongTienMoi - tongTienCu;
            }

            Console.WriteLine($"[Cập nhật] Đối tác mới {doiTacMoi.MaDoiTac}: cũ {tongTienCu}, mới {tongTienMoi}, chênh lệch {chenhlech}");

            doiTacMoi.DuNo = (float?)Math.Round((doiTacMoi.DuNo ?? 0f) + chenhlech, 2);
            // Cho phép âm → không ép về 0
        }
        else
        {
            Console.WriteLine($"[Không tìm thấy] Đối tác mới {maDoiTacMoi.Value}");
        }
    }

    // 2. Nếu đối tác cũ khác đối tác mới → giảm dư nợ đối tác cũ
    if (maDoiTacCu.HasValue && maDoiTacCu != maDoiTacMoi)
    {
        var doiTacCu = await DbContext.DoiTacs.FirstOrDefaultAsync(dt => dt.MaDoiTac == maDoiTacCu.Value);
        if (doiTacCu != null)
        {
            Console.WriteLine($"[Giảm] Đối tác cũ {doiTacCu.MaDoiTac}: giảm {tongTienCu}");
            doiTacCu.DuNo = (float?)Math.Round((doiTacCu.DuNo ?? 0f) - tongTienCu , 2);
            // Cho phép âm → không ép về 0
        }
        else
        {
            Console.WriteLine($"[Không tìm thấy] Đối tác cũ {maDoiTacCu.Value}");
        }
    }
}


    private async Task DeleteAsync(int id)
    {
        var donhang = await DbContext.DonHangs.FindAsync(id);
        if (donhang != null)
        {
            float tongTienCu = donhang.TongTien ?? 0f;
        int? maDoiTacCu = donhang.MaDoiTac;

        // Giảm dư nợ đối tác trước khi xóa phiếu
        await CapNhatDuNoDoiTacAsync(maDoiTacCu, null, tongTienCu, 0f);

             var details = DbContext.ChiTietDonHangs.Where(ct => ct.MaDonHang == id);
            // Cập nhật kho lại theo các chi tiết phiếu nhập đã xóa
            await CapNhatKhoTheoChiTietAsync(details.ToList(), new List<ChiTietDonHang>());
            var quatangs = DbContext.ChiTietQuaTangDonHangs.Where(ct => ct.MaDonHang == id);
            var quaTangAsChiTiet = quatangs.Select(q => new ChiTietDonHang
                {
                    MaSanPham = q.MaSanPhamQuaTang,
                    SoLuong = q.SoLuong
                }).ToList();
        await CapNhatKhoTheoChiTietAsync(quaTangAsChiTiet, new List<ChiTietDonHang>());
            await DbContext.SaveChangesAsync();

            @* DbContext.DonHangs.Remove(donhang); *@
           donhang.DaXoa = true;
            await DbContext.SaveChangesAsync();
            await OnInitializedAsync();
        }
    }



    private async Task CapNhatKhoTheoChiTietAsync(
    List<ChiTietDonHang> chiTietCu, 
    List<ChiTietDonHang> chiTietMoi)
{
    // 1. Cập nhật sản phẩm có trong danh sách mới
    foreach (var chiTietMoiItem in chiTietMoi)
    {
        var sanPham = await DbContext.SanPhams
            .FirstOrDefaultAsync(sp => sp.MaSanPham == chiTietMoiItem.MaSanPham);
        
        if (sanPham != null)
        {
            var chiTietCuItem = chiTietCu.FirstOrDefault(x => x.MaSanPham == sanPham.MaSanPham);
            int soLuongCu = chiTietCuItem?.SoLuong ?? 0;
            int soLuongMoi = chiTietMoiItem.SoLuong ?? 0;
            int chenhlech = soLuongMoi - soLuongCu;

            Console.WriteLine($"[Cập nhật] Sản phẩm {sanPham.MaSanPham}: cũ {soLuongCu}, mới {soLuongMoi}, chênh lệch {chenhlech}");
            
            sanPham.SoLuong = (sanPham.SoLuong ?? 0) - chenhlech; // Đơn hàng làm giảm kho

            if (sanPham.SoLuong < 0)
                sanPham.SoLuong = 0;
        }
        else
        {
            Console.WriteLine($"[Không tìm thấy] Sản phẩm {chiTietMoiItem.MaSanPham}");
        }
    }

    // 2. Xử lý sản phẩm bị xóa (có trong chiTietCu nhưng không còn trong chiTietMoi)
    foreach (var chiTietCuItem in chiTietCu)
    {
        var stillExists = chiTietMoi.Any(x => x.MaSanPham == chiTietCuItem.MaSanPham);
        if (!stillExists)
        {
            var sanPham = await DbContext.SanPhams
                .FirstOrDefaultAsync(sp => sp.MaSanPham == chiTietCuItem.MaSanPham);

            if (sanPham != null)
            {
                Console.WriteLine($"[Xóa] Sản phẩm {sanPham.MaSanPham}: tăng {chiTietCuItem.SoLuong}");

                sanPham.SoLuong = (sanPham.SoLuong ?? 0) + (chiTietCuItem.SoLuong ?? 0);
                @* if (sanPham.SoLuong < 0)
                sanPham.SoLuong = 0; *@
            }
        }
    }
}

    private void ResetForm()
    {
        DonHang = new DonHang();
        ChiTietDonHangs = new List<ChiTietDonHang>();
            QuaTangs = new List<ChiTietQuaTangDonHang>();
        Editing = false;
        DbErrorMessage = null;
    }



     //hàm check lỗi 
    private bool ValidateChiTiet()
    {
        if (ChiTietDonHangs == null || ChiTietDonHangs.Count == 0)
        {
            DbErrorMessage = "Vui lòng thêm ít nhất một sản phẩm trước khi lưu.";
            return false;
        }
        var spIds = new HashSet<int>();
        foreach (var ct in ChiTietDonHangs)
        {
            if (ct.MaSanPham == 0)
            {
                DbErrorMessage = "Có sản phẩm chưa được chọn.";
                return false;
            }

            if (ct.SoLuong <= 0)
            {
                DbErrorMessage = "Số lượng phải lớn hơn 0 cho từng sản phẩm.";
                return false;
            }

            if (!spIds.Add(ct.MaSanPham))
            {
                DbErrorMessage = "Mỗi sản phẩm chỉ được chọn một lần.";
                return false;
            }
        }
        return true;
    }


    private int? SelectedDoiTacId;
    private async Task OnDoiTacChanged(ChangeEventArgs e)
    {
        SelectedDoiTacId = int.TryParse(e.Value?.ToString(), out var id) ? id : null;

        // Gọi hàm xử lý dữ liệu, ví dụ: cập nhật DonHang.ThongTinLienLac và DonHang.DiaChi
        var doiTac = DoiTacs.FirstOrDefault(d => d.MaDoiTac == SelectedDoiTacId);
        if (doiTac != null)
        {
            DonHang.Ten = doiTac.Ten;
            DonHang.ThongTinLienLac = doiTac.ThongTinLienLac;
            DonHang.DiaChi = doiTac.DiaChi;
            DonHang.MaDoiTac = doiTac.MaDoiTac;
        }
        await InvokeAsync(StateHasChanged);
    }

    private void AddSanPham()
    {
        ChiTietDonHangs.Add(new ChiTietDonHang());
    }
    private void RemoveSanPham(ChiTietDonHang ct)
    {
        ChiTietDonHangs.Remove(ct);
        CapNhatTongTienVaTienGiam();
    }


    private float GetGiaSanPham(int? maSanPham)
    {
        return SanPhams.FirstOrDefault(sp => sp.MaSanPham == maSanPham)?.Gia ?? 0f;
    }


    private string? DbErrorMessage;
    private void ClearErrorMessage()
    {
        DbErrorMessage = null;
    }
}
