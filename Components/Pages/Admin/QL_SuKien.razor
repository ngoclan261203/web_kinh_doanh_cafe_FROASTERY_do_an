@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using FROASTERY.Services;
@* @inject NavigationManager Navigation *@
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor

@code {
    private ClaimsPrincipal? _currentUser;

    // Thay đổi từ OnInitializedAsync sang OnAfterRenderAsync
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Lấy trạng thái xác thực của người dùng
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                _currentUser = authState.User;

                // In thông tin người dùng và trạng thái xác thực
                Console.WriteLine("User: " + _currentUser?.Identity?.Name);
                Console.WriteLine("UserId: " + _currentUser?.FindFirst("UserId")?.Value); // In mã người dùng
                Console.WriteLine("Is Authenticated: " + _currentUser?.Identity?.IsAuthenticated);

                // Kiểm tra nếu người dùng chưa xác thực
                if (_currentUser?.Identity == null || !_currentUser.Identity.IsAuthenticated)
                {
                    Console.WriteLine("User not authenticated.");
                    // Chuyển hướng người dùng đến trang đăng nhập nếu chưa xác thực
                    Navigation.NavigateTo("/dangnhap", true);
                    return;
                }

                // Kiểm tra quyền Admin
                if (!_currentUser.IsInRole("Admin") &&
                    
                    !_currentUser.IsInRole("Marketing"))
                {
                    Console.WriteLine("User does not have Admin role. Redirecting to /home.");
                    // Chuyển hướng người dùng không phải Admin về trang chủ
                    Navigation.NavigateTo("/home_admin", true);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error during authentication check: " + ex.Message);
            }
        }
    }
}


@page "/quan-ly-su-kien"
@using Microsoft.EntityFrameworkCore
@using System.IO
@inject IWebHostEnvironment Environment
@inject AppDbContext DbContext
@rendermode InteractiveServer
@using FROASTERY.Models
@using FROASTERY.Data
@using FROASTERY.Components

@using FROASTERY.Components.Shared

<link rel="stylesheet" href="lib/bootstrap/dist/css/bootstrap.min.css" />
<link rel="stylesheet" href="custom.css" />

<PageTitle>Quản lý Sự Kiện</PageTitle>

<ErrorDisplay ErrorMessage="@DbErrorMessage" OnClear="ClearErrorMessage" />

<style>
    .description {
        max-height: 100px; /* Giới hạn chiều cao của mô tả */
        overflow: hidden; /* Ẩn phần nội dung vượt quá */
        transition: max-height 0.3s ease-out;
    }

    .expanded {
        max-height: none; /* Hiển thị toàn bộ khi mở rộng */
    }

    .product-img {
        max-width: 150px;
        height: auto;
        border-radius: 8px;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
    }
    .form-img {
        max-width: 200px;
        height: auto;
        border-radius: 8px;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
    }

</style>

<div class="container mt-4">
    <h3 class="text-center">Quản lý Sự Kiện</h3>
    <h5>@(Editing ? "Chỉnh sửa" : "Thêm mới") Sự Kiện</h5>

    <EditForm Model="SuKien" OnValidSubmit="Save" class="border p-4 rounded shadow bg-light mb-4">
        <DataAnnotationsValidator />
    <!-- Phần trên: Chia thành 3 phần -->
    <div class="row mb-3">
        <!-- Cột bên trái -->
        <div class="col-md-4">
            <label>Mã sự kiện:</label>
            <input type="text" @bind="SuKien.MaSuKien" class="form-control mb-2" readonly />
            <label>Loại tin:</label>
            <select @bind="SuKien.MaLoaiTin" class="form-control mb-2">
                <option value="0">-- Chọn Loại tin --</option>
                @foreach (var loai in LoaiTins)
                {
                    <option value="@loai.MaLoaiTin">@loai.TenLoaiTin</option>
                }
            </select>
            <label>Tiêu đề:</label>
            <div class="position-relative mb-2 validation-wrapper">
                    <input type="text" @bind="SuKien.TieuDe" class="form-control mb-2" />
                    <ValidationMessage For="@(() => SuKien.TieuDe)" />
            </div>
            <label>Nội dung:</label>
            <textarea @bind="SuKien.NoiDung" class="form-control mb-2" style="width: 100%; height: 80px;"></textarea>
            
        </div>

        <!-- Cột giữa: Chọn ảnh căn trái, hiển thị ảnh căn giữa -->
        <div class="col-md-4 d-flex flex-column align-items-start">
            <label >Chọn ảnh:</label>
            <InputFile OnChange="UploadImage" class="form-control mb-2" accept="image/*" />
            <div class="w-100 d-flex justify-content-center mt-4">
                @if (!string.IsNullOrEmpty(TempImagePath))
                {
                    <img src="@TempImagePath" alt="Ảnh sự kiện" title="Ảnh sự kiện" class="form-img mb-2" />
                }
                else
                {
                    <span class="text-muted">Chưa có ảnh</span>
                }
            </div>
        </div>

         <!-- Cột bên phải -->
        <div class="col-md-4">
            
            <label>Thời gian bắt đầu:</label>
                <input type="datetime-local" @bind="SuKien.ThoiGianBatDau" class="form-control mb-2" />
            <label>Thời gian kết thúc:</label>
                <input type="datetime-local" @bind="SuKien.ThoiGianKetThuc" class="form-control mb-2" />
            <label>Trạng thái:</label>
            <input type="text" value="@SuKien.TrangThai" class="form-control mb-2" readonly />
            <label>Lặp lại theo các ngày:</label>
            <div class="d-flex flex-wrap mb-2">
                    @foreach (var day in daysOfWeek)
                    {
                        <div class="form-check form-check-inline mr-4">
                            <input type="checkbox"
                                value="@day"
                                @onchange="() => ToggleDay(day)"
                                checked="@selectedDays.Contains(day)"
                                class="form-check-input" />
                            <label  class="form-check-label ">@day</label>
                        </div>
                    }

            </div>



        </div>
    </div>

    <div class="d-flex justify-content-center gap-3 mt-2">
            <button type="submit" class="btn btn-save">Lưu</button>
            <button type="button" class="btn btn-cancel"  @onclick="Cancel">Hủy</button>
    </div>
 </EditForm>

 <!-- Thêm ô nhập tìm kiếm và bộ lọc -->
<!-- Giao diện tìm kiếm sự kiện -->
<div class="card p-3 mb-4 shadow-sm">
    <div class="row g-2 align-items-end">
        <!-- Từ khóa tìm kiếm -->
        <div class="col-md-4">
            <label class="form-label">Từ khóa</label>
            <input type="text" @bind="SearchQuery" class="form-control"
                   placeholder="Mã sự kiện, tiêu đề, nội dung, loại tin..." />
        </div>

        <!-- Ngày bắt đầu -->
        <div class="col-md-2">
            <label class="form-label">Từ ngày</label>
            <input type="date" @bind="StartDate" class="form-control" />
        </div>

        <!-- Ngày kết thúc -->
        <div class="col-md-2">
            <label class="form-label">Đến ngày</label>
            <input type="date" @bind="EndDate" class="form-control" />
        </div>

        <!-- Trạng thái -->
        <div class="col-md-2">
            <label class="form-label">Trạng thái</label>
            <select @bind="SelectedTrangThai" class="form-select">
                <option value="">-- Tất cả --</option>
                <option value="Đang diễn ra">Đang diễn ra</option>
                <option value="Sắp diễn ra">Sắp diễn ra</option>
                <option value="Chưa thiết lập">Chưa thiết lập</option>
                <option value="Kết thúc">Kết thúc</option>
            </select>
        </div>

        <div class="col-md-2">
            <div class="d-flex justify-content-end mt-3">
                <button @onclick="Search" class="btn btn-success px-4">Tìm kiếm</button>
            </div>
        </div>
    </div>

</div>





<div class="table-responsive">
     <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th style ="width: 50px">Mã</th>
                <th style ="width: 100px">Loại tin</th>
                <th style ="width: 120px">Tiêu đề</th>
                <th >Nội dung</th>
                <th style ="width: 100px">Ngày bắt đầu</th>
                <th style ="width: 100px">Ngày kết thúc</th>
                <th style ="width: 110px">Lặp lại theo tuần</th>
                <th style ="width: 120px">Trạng thái</th>
                <th>Ảnh</th>
                <th style ="width: 128px">Hành Động</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var sk in SuKiens)
            {
                <tr>
                    <td>@sk.MaSuKien</td>
                    <td>@sk.LoaiTin?.TenLoaiTin</td>
                    <td>@sk.TieuDe</td>
                    <td>
                        <div class="description @(detailExpandedClass.ContainsKey(sk.MaSuKien) && detailExpandedClass[sk.MaSuKien] ? "expanded" : "")">
                            @((MarkupString)(sk.NoiDung != null ? sk.NoiDung.Replace("\r\n", "<br/>").Replace("\n", "<br/>") : "")) 
                        </div>
                        @if (!string.IsNullOrEmpty(sk.NoiDung) && sk.NoiDung.Length > 100) // Chỉ hiển thị nút nếu độ dài > 100 ký tự
                        {
                            <button class="btn btn-link p-0 shadow-none fst-italic small" @onclick="() => ToggleDetail(sk.MaSuKien)">
                                @(detailExpandedClass.ContainsKey(sk.MaSuKien) && detailExpandedClass[sk.MaSuKien] ? "Ẩn bớt" : "Xem thêm")
                            </button>
                        }
                    </td>
                    <td>@sk.ThoiGianBatDau?.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>@sk.ThoiGianKetThuc?.ToString("dd/MM/yyyy HH:mm")</td>
                    @* <td>@sk.LapLaiTheoTuan</td> *@
                    <td>@string.Join(", ", sk.NgayLapLai)</td>

                    <td>@sk.TrangThai</td>

                    <td>
                        @if (!string.IsNullOrEmpty(sk.Anh))
                        {
                            <img src="@sk.Anh" alt="Poster" title="@sk.TieuDe" class="product-img" />
                        }
                        else
                        {
                            <span>Không có ảnh</span>
                        }
                    </td>
                    <td>
                        <button @onclick="() => Edit(sk)" class="btn btn-warning mb-1">Sửa</button>
                        <button @onclick="() => Delete(sk.MaSuKien)" class="btn btn-danger">Xóa</button>
                         @if (sk.MaLoaiTin == 2)
                        {
                            <button class="btn btn-primary" @onclick="() => ChuyenTrang(sk.MaSuKien)">Điều kiện</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
</div>




@code {
     [Inject] NavigationManager Navigation { get; set; } = default!;

    private void ChuyenTrang(int maSuKien)
    {
        Navigation.NavigateTo($"/them-dieu-kien/{maSuKien}");
    }


    private List<SuKien> SuKiens = new();
    private List<SuKien> FullSuKiens = new();
    private List<LoaiTin> LoaiTins = new();
    @* private SuKien SuKien = new(); *@
    private SuKien SuKien = new() { NgayLapLai = new List<string>() };

    private bool Editing = false;
    private string SearchQuery = string.Empty; // Biến lưu truy vấn tìm kiếm
    private DateTime? StartDate { get; set; }
    private DateTime? EndDate { get; set; }
    private string? SelectedTrangThai { get; set; } = "";



    // Phương thức tìm kiếm sản phẩm
    private void Search()
    {
        var trimmedQuery = SearchQuery?.Trim();

        SuKiens = FullSuKiens.Where(item =>
            (
                // Nếu không nhập gì thì bỏ qua điều kiện tìm từ khóa
                string.IsNullOrWhiteSpace(trimmedQuery) ||
                item.MaSuKien.ToString().Contains(trimmedQuery, StringComparison.OrdinalIgnoreCase) || // Mã sự kiện
                (item.LoaiTin?.TenLoaiTin?.Contains(trimmedQuery, StringComparison.OrdinalIgnoreCase) == true) || // Loại tin
                item.TieuDe.Contains(trimmedQuery, StringComparison.OrdinalIgnoreCase) || // Tiêu đề
                (item.NoiDung?.Contains(trimmedQuery, StringComparison.OrdinalIgnoreCase) == true)  // Nội dung
                @* (item.LapLaiTheoTuan?.Contains(trimmedQuery, StringComparison.OrdinalIgnoreCase) == true) || // Lặp lại *@
                @* item.TrangThai.Contains(trimmedQuery, StringComparison.OrdinalIgnoreCase) // Trạng thái *@
            ) 
            &&
            (
                // Lọc theo khoảng thời gian bắt đầu và kết thúc
                (!StartDate.HasValue || (item.ThoiGianBatDau.HasValue && item.ThoiGianBatDau.Value.Date >= StartDate.Value.Date)) &&
                (!EndDate.HasValue || (item.ThoiGianKetThuc.HasValue && item.ThoiGianKetThuc.Value.Date <= EndDate.Value.Date))
            )
            &&
            (
                // Lọc theo trạng thái (nếu có chọn)
                string.IsNullOrWhiteSpace(SelectedTrangThai) || item.TrangThai == SelectedTrangThai
            )
        ).ToList();
        SuKiens.Reverse();
    }



    private List<string> daysOfWeek = new() 
    {
        "Thứ 2", "Thứ 3", "Thứ 4", "Thứ 5", "Thứ 6", "Thứ 7", "Chủ nhật"
    };

    private List<string> selectedDays = new(); 

    void ToggleDay(string day)
{
    if (selectedDays.Contains(day))
        selectedDays.Remove(day);
    else
        selectedDays.Add(day);
}


    // Phương thức khởi tạo dữ liệu
    protected override async Task OnInitializedAsync()
    {
        // Load danh sách sản phẩm và loại sản phẩm
        FullSuKiens = await DbContext.SuKiens
            .Include(sk => sk.LoaiTin)
            .Where(x => !x.DaXoa) // Load thêm thông tin loại sản phẩm
            .AsNoTracking() // Tránh theo dõi dữ liệu không cần thiết
            .ToListAsync();

        LoaiTins = await DbContext.LoaiTins.AsNoTracking().Where(x => !x.DaXoa).ToListAsync();

        // Gán lại danh sách đầy đủ vào danh sách hiện tại
        SuKiens = new List<SuKien>(FullSuKiens);
            
        SuKiens.Reverse();
    }


    

    private void Edit(SuKien sk)
    {
        SuKien = new SuKien
        {
            MaSuKien = sk.MaSuKien,
            MaLoaiTin = sk.MaLoaiTin,
            TieuDe = sk.TieuDe,
            Anh = sk.Anh,
            NoiDung = sk.NoiDung,
            ThoiGianBatDau = sk.ThoiGianBatDau,
            ThoiGianKetThuc = sk.ThoiGianKetThuc,
            NgayLapLai = new List<string>(sk.NgayLapLai), 
            @* LapLaiTheoTuan = SuKien.LapLaiTheoTuan, *@
            @* TrangThai = SuKien.TrangThai, *@
            //2 cái
            
    
        };
         selectedDays = new List<string>(sk.NgayLapLai); // <- dòng này

        TempImagePath = sk.Anh;
        UploadedFile = null;
        Editing = true;
    }

    private async Task Save()
    {
        DbErrorMessage = null;
        if (SuKien.MaLoaiTin == 0)
        {
            DbErrorMessage = "Vui lòng chọn loại tin.";
            return ;
        } 
        if (SuKien.ThoiGianBatDau.HasValue && SuKien.ThoiGianKetThuc.HasValue)
        {
            if (SuKien.ThoiGianKetThuc < SuKien.ThoiGianBatDau)
            {
                DbErrorMessage = "Thời gian kết thúc không được nhỏ hơn thời gian bắt đầu.";
                return;
            }
        }
        
         SuKien.NgayLapLai = new List<string>(selectedDays);
         
        
        string? oldImagePath = Editing ? SuKien.Anh : null;

        if (UploadedFile != null)
        {
            var uploadsFolder = Path.Combine(Environment.WebRootPath, "uploads");
            if (!Directory.Exists(uploadsFolder))
            {
                Directory.CreateDirectory(uploadsFolder);
            }

            // Tạo tên file mới
            var fileName = $"{Guid.NewGuid()}{Path.GetExtension(UploadedFile.Name)}";
            var filePath = Path.Combine(uploadsFolder, fileName);

            await using var stream = new FileStream(filePath, FileMode.Create);
            await UploadedFile.OpenReadStream().CopyToAsync(stream);

            // Cập nhật đường dẫn ảnh mới
            SuKien.Anh = $"/uploads/{fileName}";
        }

        if (Editing)
        {
            var entity = await DbContext.SuKiens
                .FirstOrDefaultAsync(sk => sk.MaSuKien == SuKien.MaSuKien);
            if (entity != null)
            {
                entity.MaLoaiTin = SuKien.MaLoaiTin;
                entity.TieuDe = SuKien.TieuDe;
                entity.Anh = SuKien.Anh;
                entity.NoiDung = SuKien.NoiDung;
                entity.ThoiGianBatDau = SuKien.ThoiGianBatDau;
                entity.ThoiGianKetThuc = SuKien.ThoiGianKetThuc;
                entity.NgayLapLai = new List<string>(SuKien.NgayLapLai);
                @* entity.LapLaiTheoTuan = SuKien.LapLaiTheoTuan; *@
                @* entity.TrangThai = SuKien.TrangThai; *@

            }
        }
        else
        {
            try
            {
                 DbContext.SuKiens.Add(SuKien);
            }
            catch (Exception ex)
            {
                DbErrorMessage = "Lưu dữ liệu thất bại: " + ex.Message;
                return;
            }    
        }

        await DbContext.SaveChangesAsync();

         if (!string.IsNullOrEmpty(oldImagePath) && oldImagePath != SuKien.Anh)
        {
             DeleteImageFile(oldImagePath);//hàm xóa ảnh trên server
        }

        await OnInitializedAsync();
       Cancel();
    }

    private async Task Delete(int id)
    {
       var entity = await DbContext.SuKiens.FindAsync(id);
        {
            if (entity != null){
            entity.DaXoa = true;
            await DbContext.SaveChangesAsync();

            // Reload danh sách những loại chưa bị xóa
           await OnInitializedAsync();
           }
        }
    }
    @* private async Task Delete(int id)
    {
        var entity = await DbContext.SuKiens.FindAsync(id);
        if (entity != null)
        {
            if (!string.IsNullOrEmpty(entity.Anh))
            {
                DeleteImageFile(entity.Anh);//hàm xóa ảnh trên server
            }
            DbContext.SuKiens.Remove(entity);
            await DbContext.SaveChangesAsync();
            SuKiens = await DbContext.SuKiens.Include(sk => sk.LoaiTin).AsNoTracking().ToListAsync();
        }
    } *@

    private void Cancel()
    {
        SuKien = new() { NgayLapLai = new List<string>() };
        selectedDays.Clear();
        TempImagePath = null;
        UploadedFile = null;
        Editing = false;
        DbErrorMessage = null;
    }




///===============Phần xử lý ảnh===============
    private string? TempImagePath ;
    private IBrowserFile? UploadedFile;
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        UploadedFile = e.File;
        if (UploadedFile != null)
        {
            var fileType = UploadedFile.ContentType; // Lấy kiểu file
            using var memoryStream = new MemoryStream();
            await UploadedFile.OpenReadStream().CopyToAsync(memoryStream);

            // Chuyển ảnh sang Base64 ngay khi đọc
            TempImagePath = $"data:{fileType};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
        }
    }

    private void DeleteImageFile(string? imagePath)
    {
        if (!string.IsNullOrEmpty(imagePath))
        {
            var fullPath = Path.Combine(Environment.WebRootPath, imagePath.TrimStart('/'));
            if (System.IO.File.Exists(fullPath))
            {
                try
                {
                    System.IO.File.Delete(fullPath);
                }
                catch (Exception ex)
                {  
                DbErrorMessage = $"Lỗi xóa file: {ex.Message}";
                }
            }
        }
    }


    //================code bắt lỗi =============
    private string? DbErrorMessage;
    private void ClearErrorMessage()
    {
        DbErrorMessage = null;
    }


    // =====code xử lý mở rộng mô tả và chi tiết=====
    private Dictionary<int, bool> descriptionExpandedClass = new();
    private Dictionary<int, bool> detailExpandedClass = new();

    private void ToggleDescription(int Id)
    {
        if (descriptionExpandedClass.ContainsKey(Id))
        {
            descriptionExpandedClass[Id] = !descriptionExpandedClass[Id];
        }
        else
        {
            descriptionExpandedClass[Id] = true;
        }
    }

    private void ToggleDetail(int Id)
    {
        if (detailExpandedClass.ContainsKey(Id))
        {
            detailExpandedClass[Id] = !detailExpandedClass[Id];
        }
        else
        {
            detailExpandedClass[Id] = true;
        }
    }
}
